
ADCtest.elf:     file format elf32-littlenios2
ADCtest.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00003150 memsz 0x00003150 flags r-x
    LOAD off    0x00004170 vaddr 0x00083170 paddr 0x000844b0 align 2**12
         filesz 0x00001340 memsz 0x00001340 flags rw-
    LOAD off    0x000057f0 vaddr 0x000857f0 paddr 0x000857f0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002eac  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  000830f0  000830f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001340  00083170  000844b0  00004170  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000857f0  000857f0  000057f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00085910  00085910  000054b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000054b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000658  00000000  00000000  000054d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009104  00000000  00000000  00005b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000323f  00000000  00000000  0000ec34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000035ae  00000000  00000000  00011e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cc0  00000000  00000000  00015424  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e46  00000000  00000000  000160e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000141d  00000000  00000000  00017f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00019348  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e0  00000000  00000000  00019378  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001b29e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001b2a1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001b2ad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001b2ae  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001b2af  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001b2b3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001b2b7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001b2bb  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001b2c6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001b2d1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001b2dc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000031  00000000  00000000  0001b2e4  2**0
                  CONTENTS, READONLY
 29 .jdi          00004075  00000000  00000000  0001b315  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00047a2e  00000000  00000000  0001f38a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
000830f0 l    d  .rodata	00000000 .rodata
00083170 l    d  .rwdata	00000000 .rwdata
000857f0 l    d  .bss	00000000 .bss
00085910 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ADCtest_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000806dc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00083170 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00080f4c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000810a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000811ec l     F .text	00000038 alt_dev_reg
00083250 l     O .rwdata	00001060 jtag_uart_0
000842b0 l     O .rwdata	0000002c adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000814e0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000816ec l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_adc.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00081fc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008212c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00082158 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008267c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000827bc l     F .text	00000050 alt_get_errno
0008280c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00085804 g     O .bss	00000004 alt_instruction_exception_handler
00081038 g     F .text	0000006c alt_main
0008062c g     F .text	00000080 _puts_r
00080440 g     F .text	00000064 button_monitor_isr
00085810 g     O .bss	00000100 alt_irq
000844b0 g       *ABS*	00000000 __flash_rwdata_start
000805e0 g     F .text	0000004c printf
00082c38 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
000857f0 g     O .bss	00000004 errno
000857fc g     O .bss	00000004 alt_argv
0008c484 g       *ABS*	00000000 _gp
00084304 g     O .rwdata	00000180 alt_fd_list
0008224c g     F .text	00000090 alt_find_dev
00082f04 g     F .text	00000028 memcpy
00082740 g     F .text	0000007c alt_io_redirect
000806ac g     F .text	00000014 puts
000825e0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000818ec g     F .text	0000021c altera_avalon_jtag_uart_read
000805a4 g     F .text	0000003c _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00080e90 g     F .text	00000064 .hidden __udivsi3
00082e24 g     F .text	00000090 alt_icache_flush
000844a0 g     O .rwdata	00000004 alt_max_fd
00080290 g     F .text	000001b0 alt_irq_register
00084484 g     O .rwdata	00000004 _global_impure_ptr
00085910 g       *ABS*	00000000 __bss_end
000824f0 g     F .text	000000f0 alt_iic_isr_register
00081d2c g     F .text	00000040 alt_up_adc_open_dev
00082b30 g     F .text	00000108 alt_tick
000824a4 g     F .text	0000004c alt_ic_irq_enabled
00082a94 g     F .text	0000009c alt_alarm_stop
000857f4 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
000842dc g     O .rwdata	00000028 alt_dev_null
000820e4 g     F .text	00000048 alt_dcache_flush_all
000844b0 g       *ABS*	00000000 __ram_rwdata_end
00084498 g     O .rwdata	00000008 alt_dev_list
000810f4 g     F .text	000000f8 write
00083170 g       *ABS*	00000000 __ram_rodata_end
00080ef4 g     F .text	00000058 .hidden __umodsi3
00085910 g       *ABS*	00000000 end
00081418 g     F .text	000000c8 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000ce200 g       *ABS*	00000000 __alt_stack_pointer
00081b08 g     F .text	00000224 altera_avalon_jtag_uart_write
00080748 g     F .text	00000524 ___vfprintf_internal_r
00082f2c g     F .text	00000190 __call_exitprocs
00080244 g     F .text	0000004c _start
00085808 g     O .bss	00000004 _alt_tick_rate
0008580c g     O .bss	00000004 _alt_nticks
0008125c g     F .text	00000058 alt_sys_init
00081794 g     F .text	00000068 altera_avalon_jtag_uart_close
00083170 g       *ABS*	00000000 __ram_rwdata_start
000830f0 g       *ABS*	00000000 __ram_rodata_start
000812b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00082d70 g     F .text	000000b4 alt_get_fd
00082ed4 g     F .text	00000030 memcmp
00081374 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00085910 g       *ABS*	00000000 __alt_stack_base
000813c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082c5c g     F .text	00000114 alt_find_file
000821a8 g     F .text	000000a4 alt_dev_llist_insert
00080c88 g     F .text	000000b8 __sfvwrite_small_dev
000857f0 g       *ABS*	00000000 __bss_start
000804a4 g     F .text	00000100 main
00085800 g     O .bss	00000004 alt_envp
00081314 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000844a4 g     O .rwdata	00000004 alt_errno
00081d6c g     F .text	00000118 alt_up_adc_read
00080d98 g     F .text	00000084 .hidden __divsi3
000830f0 g       *ABS*	00000000 __flash_rodata_start
00081224 g     F .text	00000038 alt_irq_init
00082a30 g     F .text	00000064 alt_release_fd
00080d40 g     F .text	00000058 _write_r
00084488 g     O .rwdata	00000004 _impure_ptr
000857f8 g     O .bss	00000004 alt_argc
00080020 g       .exceptions	00000000 alt_irq_entry
00084490 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00082310 g     F .text	00000050 alt_ic_isr_register
000844b0 g       *ABS*	00000000 _edata
00085910 g       *ABS*	00000000 _end
00080244 g       *ABS*	00000000 __ram_exceptions_end
000817fc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00082400 g     F .text	000000a4 alt_ic_irq_disable
00082eb4 g     F .text	00000020 exit
00080e1c g     F .text	00000074 .hidden __modsi3
000ce200 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000830bc g     F .text	00000034 _exit
00081e84 g     F .text	00000140 alt_alarm_start
000806c0 g     F .text	0000001c strlen
000828d8 g     F .text	00000158 open
000822dc g     F .text	00000034 alt_icache_flush_all
0008448c g     O .rwdata	00000004 alt_priority_mask
00082360 g     F .text	000000a0 alt_ic_irq_enable
00080c6c g     F .text	0000001c __vfprintf_internal
000844a8 g     O .rwdata	00000008 alt_alarm_list
00082014 g     F .text	000000d0 close
00080fb4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffb1e04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800234 	movhi	r2,8
   80140:	10960404 	addi	r2,r2,22544
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800234 	movhi	r2,8
   80158:	10960404 	addi	r2,r2,22544
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffb1f2c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb1f20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a4e017 	ldw	r2,-27776(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a4e017 	ldw	r2,-27776(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfffb2048>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
   8025c:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   80260:	d6b12114 	ori	gp,gp,50308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80268:	1095fc14 	ori	r2,r2,22512

    movhi r3, %hi(__bss_end)
   8026c:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   80270:	18d64414 	ori	r3,r3,22800

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfffb2078>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	0080fb40 	call	80fb4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	00810380 	call	81038 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfffb208c>

00080290 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   80290:	defff004 	addi	sp,sp,-64
   80294:	df000f15 	stw	fp,60(sp)
   80298:	df000f04 	addi	fp,sp,60
   8029c:	e13ffd15 	stw	r4,-12(fp)
   802a0:	e17ffe15 	stw	r5,-8(fp)
   802a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   802a8:	00bffa84 	movi	r2,-22
   802ac:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   802b0:	e0bffd17 	ldw	r2,-12(fp)
   802b4:	10800828 	cmpgeui	r2,r2,32
   802b8:	10005c1e 	bne	r2,zero,8042c <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   802bc:	0005303a 	rdctl	r2,status
   802c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   802c4:	e0fff617 	ldw	r3,-40(fp)
   802c8:	00bfff84 	movi	r2,-2
   802cc:	1884703a 	and	r2,r3,r2
   802d0:	1001703a 	wrctl	status,r2
  
  return context;
   802d4:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   802d8:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   802dc:	00800234 	movhi	r2,8
   802e0:	10960404 	addi	r2,r2,22544
   802e4:	e0fffd17 	ldw	r3,-12(fp)
   802e8:	180690fa 	slli	r3,r3,3
   802ec:	10c5883a 	add	r2,r2,r3
   802f0:	e0ffff17 	ldw	r3,-4(fp)
   802f4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   802f8:	00800234 	movhi	r2,8
   802fc:	10960404 	addi	r2,r2,22544
   80300:	e0fffd17 	ldw	r3,-12(fp)
   80304:	180690fa 	slli	r3,r3,3
   80308:	10c5883a 	add	r2,r2,r3
   8030c:	10800104 	addi	r2,r2,4
   80310:	e0fffe17 	ldw	r3,-8(fp)
   80314:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   80318:	e0bfff17 	ldw	r2,-4(fp)
   8031c:	10001f26 	beq	r2,zero,8039c <alt_irq_register+0x10c>
   80320:	e0bffd17 	ldw	r2,-12(fp)
   80324:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   80328:	0005303a 	rdctl	r2,status
   8032c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   80330:	e0fff717 	ldw	r3,-36(fp)
   80334:	00bfff84 	movi	r2,-2
   80338:	1884703a 	and	r2,r3,r2
   8033c:	1001703a 	wrctl	status,r2
  
  return context;
   80340:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   80344:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   80348:	00c00044 	movi	r3,1
   8034c:	e0bff217 	ldw	r2,-56(fp)
   80350:	1884983a 	sll	r2,r3,r2
   80354:	1007883a 	mov	r3,r2
   80358:	00800234 	movhi	r2,8
   8035c:	1095fd04 	addi	r2,r2,22516
   80360:	10800017 	ldw	r2,0(r2)
   80364:	1886b03a 	or	r3,r3,r2
   80368:	00800234 	movhi	r2,8
   8036c:	1095fd04 	addi	r2,r2,22516
   80370:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   80374:	00800234 	movhi	r2,8
   80378:	1095fd04 	addi	r2,r2,22516
   8037c:	10800017 	ldw	r2,0(r2)
   80380:	100170fa 	wrctl	ienable,r2
   80384:	e0bff817 	ldw	r2,-32(fp)
   80388:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8038c:	e0bff917 	ldw	r2,-28(fp)
   80390:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80394:	0005883a 	mov	r2,zero
   80398:	00001f06 	br	80418 <alt_irq_register+0x188>
   8039c:	e0bffd17 	ldw	r2,-12(fp)
   803a0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   803a4:	0005303a 	rdctl	r2,status
   803a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   803ac:	e0fffa17 	ldw	r3,-24(fp)
   803b0:	00bfff84 	movi	r2,-2
   803b4:	1884703a 	and	r2,r3,r2
   803b8:	1001703a 	wrctl	status,r2
  
  return context;
   803bc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   803c0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   803c4:	00c00044 	movi	r3,1
   803c8:	e0bff417 	ldw	r2,-48(fp)
   803cc:	1884983a 	sll	r2,r3,r2
   803d0:	0084303a 	nor	r2,zero,r2
   803d4:	1007883a 	mov	r3,r2
   803d8:	00800234 	movhi	r2,8
   803dc:	1095fd04 	addi	r2,r2,22516
   803e0:	10800017 	ldw	r2,0(r2)
   803e4:	1886703a 	and	r3,r3,r2
   803e8:	00800234 	movhi	r2,8
   803ec:	1095fd04 	addi	r2,r2,22516
   803f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   803f4:	00800234 	movhi	r2,8
   803f8:	1095fd04 	addi	r2,r2,22516
   803fc:	10800017 	ldw	r2,0(r2)
   80400:	100170fa 	wrctl	ienable,r2
   80404:	e0bffb17 	ldw	r2,-20(fp)
   80408:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8040c:	e0bffc17 	ldw	r2,-16(fp)
   80410:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   80414:	0005883a 	mov	r2,zero
   80418:	e0bff115 	stw	r2,-60(fp)
   8041c:	e0bff317 	ldw	r2,-52(fp)
   80420:	e0bff515 	stw	r2,-44(fp)
   80424:	e0bff517 	ldw	r2,-44(fp)
   80428:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8042c:	e0bff117 	ldw	r2,-60(fp)
}
   80430:	e037883a 	mov	sp,fp
   80434:	df000017 	ldw	fp,0(sp)
   80438:	dec00104 	addi	sp,sp,4
   8043c:	f800283a 	ret

00080440 <button_monitor_isr>:
#include <stdio.h>
#include "altera_up_avalon_adc.h"
#include "altera_avalon_pio_regs.h"
#include "C:\Users\petry\OneDrive\projects_quartus\test_ADC\software\ADCtest_bsp\HAL\src\alt_irq_register.c"

void button_monitor_isr(void* context, alt_u32 id){
   80440:	defffc04 	addi	sp,sp,-16
   80444:	df000315 	stw	fp,12(sp)
   80448:	df000304 	addi	fp,sp,12
   8044c:	e13ffe15 	stw	r4,-8(fp)
   80450:	e17fff15 	stw	r5,-4(fp)
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
   80454:	e0bffe17 	ldw	r2,-8(fp)
   80458:	e0bffd15 	stw	r2,-12(fp)
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button
   8045c:	00800434 	movhi	r2,16
   80460:	10840f04 	addi	r2,r2,4156
   80464:	10800037 	ldwio	r2,0(r2)
   80468:	10c003cc 	andi	r3,r2,15
   8046c:	e0bffd17 	ldw	r2,-12(fp)
   80470:	10800017 	ldw	r2,0(r2)
   80474:	10c6b03a 	or	r3,r2,r3
   80478:	e0bffd17 	ldw	r2,-12(fp)
   8047c:	10c00015 	stw	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
   80480:	0007883a 	mov	r3,zero
   80484:	00800434 	movhi	r2,16
   80488:	10840f04 	addi	r2,r2,4156
   8048c:	10c00035 	stwio	r3,0(r2)
}
   80490:	0001883a 	nop
   80494:	e037883a 	mov	sp,fp
   80498:	df000017 	ldw	fp,0(sp)
   8049c:	dec00104 	addi	sp,sp,4
   804a0:	f800283a 	ret

000804a4 <main>:

int main()
{
   804a4:	defff804 	addi	sp,sp,-32
   804a8:	dfc00715 	stw	ra,28(sp)
   804ac:	df000615 	stw	fp,24(sp)
   804b0:	df000604 	addi	fp,sp,24
	alt_up_adc_dev* adc;
	adc = alt_up_adc_open_dev("/dev/adc_0");
   804b4:	01000234 	movhi	r4,8
   804b8:	210c3c04 	addi	r4,r4,12528
   804bc:	0081d2c0 	call	81d2c <alt_up_adc_open_dev>
   804c0:	e0bffb15 	stw	r2,-20(fp)
	if(adc != NULL)
   804c4:	e0bffb17 	ldw	r2,-20(fp)
   804c8:	10000426 	beq	r2,zero,804dc <main+0x38>
		printf("ADC open successfully\n");
   804cc:	01000234 	movhi	r4,8
   804d0:	210c3f04 	addi	r4,r4,12540
   804d4:	00806ac0 	call	806ac <puts>
   804d8:	00000306 	br	804e8 <main+0x44>
	else
		printf("error ADC open\n");
   804dc:	01000234 	movhi	r4,8
   804e0:	210c4504 	addi	r4,r4,12564
   804e4:	00806ac0 	call	806ac <puts>

	unsigned int adc_in, adc_in_new, ledr, k;
	volatile alt_u32 btnmask = 0;
   804e8:	e03fff15 	stw	zero,-4(fp)

	//IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0E);
	//IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
	//alt_irq_register(KEY_IRQ, (void *)btnmask, &button_monitor_isr);

	ledr = 0x01;
   804ec:	00800044 	movi	r2,1
   804f0:	e0bffc15 	stw	r2,-16(fp)
	k = 0;
   804f4:	e03ffa15 	stw	zero,-24(fp)

	alt_up_adc_auto_enable(adc);
   804f8:	e0bffb17 	ldw	r2,-20(fp)
   804fc:	10800a17 	ldw	r2,40(r2)
   80500:	10800104 	addi	r2,r2,4
   80504:	1007883a 	mov	r3,r2
   80508:	00800044 	movi	r2,1
   8050c:	18800035 	stwio	r2,0(r3)

	while(1)
	{
		if(btnmask & 0x0F != 0)
   80510:	e0bfff17 	ldw	r2,-4(fp)
   80514:	1080004c 	andi	r2,r2,1
   80518:	10000426 	beq	r2,zero,8052c <main+0x88>
		{
			printf("btn");
   8051c:	01000234 	movhi	r4,8
   80520:	210c4904 	addi	r4,r4,12580
   80524:	00805e00 	call	805e0 <printf>
			btnmask = 0;
   80528:	e03fff15 	stw	zero,-4(fp)
		}
		adc_in_new = alt_up_adc_read(adc, 7);
   8052c:	014001c4 	movi	r5,7
   80530:	e13ffb17 	ldw	r4,-20(fp)
   80534:	0081d6c0 	call	81d6c <alt_up_adc_read>
   80538:	e0bffd15 	stw	r2,-12(fp)

		if (alt_up_adc_read(adc, 3)/*||alt_up_adc_read(adc, 1)||alt_up_adc_read(adc, 2)||alt_up_adc_read(adc, 3)||alt_up_adc_read(adc, 4)||alt_up_adc_read(adc, 5)||alt_up_adc_read(adc, 6)||alt_up_adc_read(adc, 7)*/)
   8053c:	014000c4 	movi	r5,3
   80540:	e13ffb17 	ldw	r4,-20(fp)
   80544:	0081d6c0 	call	81d6c <alt_up_adc_read>
   80548:	103ff126 	beq	r2,zero,80510 <__alt_data_end+0xfffb2310>
		{
			ledr = 0x01 << k;
   8054c:	00c00044 	movi	r3,1
   80550:	e0bffa17 	ldw	r2,-24(fp)
   80554:	1884983a 	sll	r2,r3,r2
   80558:	e0bffc15 	stw	r2,-16(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(LEDR_BASE, ledr);
   8055c:	e0fffc17 	ldw	r3,-16(fp)
   80560:	00800434 	movhi	r2,16
   80564:	10840804 	addi	r2,r2,4128
   80568:	10c00035 	stwio	r3,0(r2)
			k++;
   8056c:	e0bffa17 	ldw	r2,-24(fp)
   80570:	10800044 	addi	r2,r2,1
   80574:	e0bffa15 	stw	r2,-24(fp)
			if (k == 10)
   80578:	e0bffa17 	ldw	r2,-24(fp)
   8057c:	10800298 	cmpnei	r2,r2,10
   80580:	1000011e 	bne	r2,zero,80588 <main+0xe4>
				k = 0;
   80584:	e03ffa15 	stw	zero,-24(fp)
			adc_in = adc_in_new;
   80588:	e0bffd17 	ldw	r2,-12(fp)
   8058c:	e0bffe15 	stw	r2,-8(fp)
			printf("%d\n", adc_in_new);
   80590:	e17ffd17 	ldw	r5,-12(fp)
   80594:	01000234 	movhi	r4,8
   80598:	210c4a04 	addi	r4,r4,12584
   8059c:	00805e00 	call	805e0 <printf>
			//alt_up_adc_update(adc);
		}
	}
   805a0:	003fdb06 	br	80510 <__alt_data_end+0xfffb2310>

000805a4 <_printf_r>:
   805a4:	defffd04 	addi	sp,sp,-12
   805a8:	dfc00015 	stw	ra,0(sp)
   805ac:	d9800115 	stw	r6,4(sp)
   805b0:	d9c00215 	stw	r7,8(sp)
   805b4:	20c00217 	ldw	r3,8(r4)
   805b8:	01800234 	movhi	r6,8
   805bc:	31832204 	addi	r6,r6,3208
   805c0:	19800115 	stw	r6,4(r3)
   805c4:	280d883a 	mov	r6,r5
   805c8:	21400217 	ldw	r5,8(r4)
   805cc:	d9c00104 	addi	r7,sp,4
   805d0:	00807480 	call	80748 <___vfprintf_internal_r>
   805d4:	dfc00017 	ldw	ra,0(sp)
   805d8:	dec00304 	addi	sp,sp,12
   805dc:	f800283a 	ret

000805e0 <printf>:
   805e0:	defffc04 	addi	sp,sp,-16
   805e4:	dfc00015 	stw	ra,0(sp)
   805e8:	d9400115 	stw	r5,4(sp)
   805ec:	d9800215 	stw	r6,8(sp)
   805f0:	d9c00315 	stw	r7,12(sp)
   805f4:	00800234 	movhi	r2,8
   805f8:	10912204 	addi	r2,r2,17544
   805fc:	10800017 	ldw	r2,0(r2)
   80600:	01400234 	movhi	r5,8
   80604:	29432204 	addi	r5,r5,3208
   80608:	10c00217 	ldw	r3,8(r2)
   8060c:	d9800104 	addi	r6,sp,4
   80610:	19400115 	stw	r5,4(r3)
   80614:	200b883a 	mov	r5,r4
   80618:	11000217 	ldw	r4,8(r2)
   8061c:	0080c6c0 	call	80c6c <__vfprintf_internal>
   80620:	dfc00017 	ldw	ra,0(sp)
   80624:	dec00404 	addi	sp,sp,16
   80628:	f800283a 	ret

0008062c <_puts_r>:
   8062c:	defffd04 	addi	sp,sp,-12
   80630:	dc000015 	stw	r16,0(sp)
   80634:	2021883a 	mov	r16,r4
   80638:	2809883a 	mov	r4,r5
   8063c:	dfc00215 	stw	ra,8(sp)
   80640:	dc400115 	stw	r17,4(sp)
   80644:	2823883a 	mov	r17,r5
   80648:	00806c00 	call	806c0 <strlen>
   8064c:	81400217 	ldw	r5,8(r16)
   80650:	01000234 	movhi	r4,8
   80654:	21032204 	addi	r4,r4,3208
   80658:	29000115 	stw	r4,4(r5)
   8065c:	100f883a 	mov	r7,r2
   80660:	880d883a 	mov	r6,r17
   80664:	8009883a 	mov	r4,r16
   80668:	0080c880 	call	80c88 <__sfvwrite_small_dev>
   8066c:	00ffffc4 	movi	r3,-1
   80670:	10c00926 	beq	r2,r3,80698 <_puts_r+0x6c>
   80674:	81400217 	ldw	r5,8(r16)
   80678:	01800234 	movhi	r6,8
   8067c:	01c00044 	movi	r7,1
   80680:	28800117 	ldw	r2,4(r5)
   80684:	318c4b04 	addi	r6,r6,12588
   80688:	8009883a 	mov	r4,r16
   8068c:	103ee83a 	callr	r2
   80690:	10bfffe0 	cmpeqi	r2,r2,-1
   80694:	0085c83a 	sub	r2,zero,r2
   80698:	dfc00217 	ldw	ra,8(sp)
   8069c:	dc400117 	ldw	r17,4(sp)
   806a0:	dc000017 	ldw	r16,0(sp)
   806a4:	dec00304 	addi	sp,sp,12
   806a8:	f800283a 	ret

000806ac <puts>:
   806ac:	00800234 	movhi	r2,8
   806b0:	10912204 	addi	r2,r2,17544
   806b4:	200b883a 	mov	r5,r4
   806b8:	11000017 	ldw	r4,0(r2)
   806bc:	008062c1 	jmpi	8062c <_puts_r>

000806c0 <strlen>:
   806c0:	2005883a 	mov	r2,r4
   806c4:	10c00007 	ldb	r3,0(r2)
   806c8:	18000226 	beq	r3,zero,806d4 <strlen+0x14>
   806cc:	10800044 	addi	r2,r2,1
   806d0:	003ffc06 	br	806c4 <__alt_data_end+0xfffb24c4>
   806d4:	1105c83a 	sub	r2,r2,r4
   806d8:	f800283a 	ret

000806dc <print_repeat>:
   806dc:	defffb04 	addi	sp,sp,-20
   806e0:	dc800315 	stw	r18,12(sp)
   806e4:	dc400215 	stw	r17,8(sp)
   806e8:	dc000115 	stw	r16,4(sp)
   806ec:	dfc00415 	stw	ra,16(sp)
   806f0:	2025883a 	mov	r18,r4
   806f4:	2823883a 	mov	r17,r5
   806f8:	d9800005 	stb	r6,0(sp)
   806fc:	3821883a 	mov	r16,r7
   80700:	04000a0e 	bge	zero,r16,8072c <print_repeat+0x50>
   80704:	88800117 	ldw	r2,4(r17)
   80708:	01c00044 	movi	r7,1
   8070c:	d80d883a 	mov	r6,sp
   80710:	880b883a 	mov	r5,r17
   80714:	9009883a 	mov	r4,r18
   80718:	103ee83a 	callr	r2
   8071c:	843fffc4 	addi	r16,r16,-1
   80720:	103ff726 	beq	r2,zero,80700 <__alt_data_end+0xfffb2500>
   80724:	00bfffc4 	movi	r2,-1
   80728:	00000106 	br	80730 <print_repeat+0x54>
   8072c:	0005883a 	mov	r2,zero
   80730:	dfc00417 	ldw	ra,16(sp)
   80734:	dc800317 	ldw	r18,12(sp)
   80738:	dc400217 	ldw	r17,8(sp)
   8073c:	dc000117 	ldw	r16,4(sp)
   80740:	dec00504 	addi	sp,sp,20
   80744:	f800283a 	ret

00080748 <___vfprintf_internal_r>:
   80748:	deffe504 	addi	sp,sp,-108
   8074c:	d8c00804 	addi	r3,sp,32
   80750:	df001915 	stw	fp,100(sp)
   80754:	ddc01815 	stw	r23,96(sp)
   80758:	dd801715 	stw	r22,92(sp)
   8075c:	dd401615 	stw	r21,88(sp)
   80760:	dd001515 	stw	r20,84(sp)
   80764:	dcc01415 	stw	r19,80(sp)
   80768:	dc801315 	stw	r18,76(sp)
   8076c:	dc401215 	stw	r17,72(sp)
   80770:	dc001115 	stw	r16,68(sp)
   80774:	dfc01a15 	stw	ra,104(sp)
   80778:	2027883a 	mov	r19,r4
   8077c:	2839883a 	mov	fp,r5
   80780:	382d883a 	mov	r22,r7
   80784:	d9800f15 	stw	r6,60(sp)
   80788:	0021883a 	mov	r16,zero
   8078c:	d8000e15 	stw	zero,56(sp)
   80790:	002f883a 	mov	r23,zero
   80794:	002b883a 	mov	r21,zero
   80798:	0025883a 	mov	r18,zero
   8079c:	0023883a 	mov	r17,zero
   807a0:	d8000c15 	stw	zero,48(sp)
   807a4:	d8000b15 	stw	zero,44(sp)
   807a8:	0029883a 	mov	r20,zero
   807ac:	d8c00915 	stw	r3,36(sp)
   807b0:	d8c00f17 	ldw	r3,60(sp)
   807b4:	19000003 	ldbu	r4,0(r3)
   807b8:	20803fcc 	andi	r2,r4,255
   807bc:	1080201c 	xori	r2,r2,128
   807c0:	10bfe004 	addi	r2,r2,-128
   807c4:	10011c26 	beq	r2,zero,80c38 <___vfprintf_internal_r+0x4f0>
   807c8:	00c00044 	movi	r3,1
   807cc:	a0c01426 	beq	r20,r3,80820 <___vfprintf_internal_r+0xd8>
   807d0:	1d000216 	blt	r3,r20,807dc <___vfprintf_internal_r+0x94>
   807d4:	a0000626 	beq	r20,zero,807f0 <___vfprintf_internal_r+0xa8>
   807d8:	00011306 	br	80c28 <___vfprintf_internal_r+0x4e0>
   807dc:	01400084 	movi	r5,2
   807e0:	a1401d26 	beq	r20,r5,80858 <___vfprintf_internal_r+0x110>
   807e4:	014000c4 	movi	r5,3
   807e8:	a1402926 	beq	r20,r5,80890 <___vfprintf_internal_r+0x148>
   807ec:	00010e06 	br	80c28 <___vfprintf_internal_r+0x4e0>
   807f0:	01400944 	movi	r5,37
   807f4:	1140fb26 	beq	r2,r5,80be4 <___vfprintf_internal_r+0x49c>
   807f8:	e0800117 	ldw	r2,4(fp)
   807fc:	d9000005 	stb	r4,0(sp)
   80800:	01c00044 	movi	r7,1
   80804:	d80d883a 	mov	r6,sp
   80808:	e00b883a 	mov	r5,fp
   8080c:	9809883a 	mov	r4,r19
   80810:	103ee83a 	callr	r2
   80814:	1000d61e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80818:	84000044 	addi	r16,r16,1
   8081c:	00010206 	br	80c28 <___vfprintf_internal_r+0x4e0>
   80820:	01400c04 	movi	r5,48
   80824:	1140f826 	beq	r2,r5,80c08 <___vfprintf_internal_r+0x4c0>
   80828:	01400944 	movi	r5,37
   8082c:	11400a1e 	bne	r2,r5,80858 <___vfprintf_internal_r+0x110>
   80830:	d8800005 	stb	r2,0(sp)
   80834:	e0800117 	ldw	r2,4(fp)
   80838:	a00f883a 	mov	r7,r20
   8083c:	d80d883a 	mov	r6,sp
   80840:	e00b883a 	mov	r5,fp
   80844:	9809883a 	mov	r4,r19
   80848:	103ee83a 	callr	r2
   8084c:	1000c81e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80850:	84000044 	addi	r16,r16,1
   80854:	0000f306 	br	80c24 <___vfprintf_internal_r+0x4dc>
   80858:	217ff404 	addi	r5,r4,-48
   8085c:	29403fcc 	andi	r5,r5,255
   80860:	00c00244 	movi	r3,9
   80864:	19400736 	bltu	r3,r5,80884 <___vfprintf_internal_r+0x13c>
   80868:	00bfffc4 	movi	r2,-1
   8086c:	88800226 	beq	r17,r2,80878 <___vfprintf_internal_r+0x130>
   80870:	8c4002a4 	muli	r17,r17,10
   80874:	00000106 	br	8087c <___vfprintf_internal_r+0x134>
   80878:	0023883a 	mov	r17,zero
   8087c:	2c63883a 	add	r17,r5,r17
   80880:	0000e206 	br	80c0c <___vfprintf_internal_r+0x4c4>
   80884:	01400b84 	movi	r5,46
   80888:	1140e426 	beq	r2,r5,80c1c <___vfprintf_internal_r+0x4d4>
   8088c:	05000084 	movi	r20,2
   80890:	213ff404 	addi	r4,r4,-48
   80894:	21003fcc 	andi	r4,r4,255
   80898:	00c00244 	movi	r3,9
   8089c:	19000736 	bltu	r3,r4,808bc <___vfprintf_internal_r+0x174>
   808a0:	00bfffc4 	movi	r2,-1
   808a4:	90800226 	beq	r18,r2,808b0 <___vfprintf_internal_r+0x168>
   808a8:	948002a4 	muli	r18,r18,10
   808ac:	00000106 	br	808b4 <___vfprintf_internal_r+0x16c>
   808b0:	0025883a 	mov	r18,zero
   808b4:	24a5883a 	add	r18,r4,r18
   808b8:	0000db06 	br	80c28 <___vfprintf_internal_r+0x4e0>
   808bc:	00c01b04 	movi	r3,108
   808c0:	10c0d426 	beq	r2,r3,80c14 <___vfprintf_internal_r+0x4cc>
   808c4:	013fffc4 	movi	r4,-1
   808c8:	91000226 	beq	r18,r4,808d4 <___vfprintf_internal_r+0x18c>
   808cc:	d8000b15 	stw	zero,44(sp)
   808d0:	00000106 	br	808d8 <___vfprintf_internal_r+0x190>
   808d4:	04800044 	movi	r18,1
   808d8:	01001a44 	movi	r4,105
   808dc:	11001626 	beq	r2,r4,80938 <___vfprintf_internal_r+0x1f0>
   808e0:	20800916 	blt	r4,r2,80908 <___vfprintf_internal_r+0x1c0>
   808e4:	010018c4 	movi	r4,99
   808e8:	11008a26 	beq	r2,r4,80b14 <___vfprintf_internal_r+0x3cc>
   808ec:	01001904 	movi	r4,100
   808f0:	11001126 	beq	r2,r4,80938 <___vfprintf_internal_r+0x1f0>
   808f4:	01001604 	movi	r4,88
   808f8:	1100ca1e 	bne	r2,r4,80c24 <___vfprintf_internal_r+0x4dc>
   808fc:	00c00044 	movi	r3,1
   80900:	d8c00e15 	stw	r3,56(sp)
   80904:	00001406 	br	80958 <___vfprintf_internal_r+0x210>
   80908:	01001cc4 	movi	r4,115
   8090c:	11009a26 	beq	r2,r4,80b78 <___vfprintf_internal_r+0x430>
   80910:	20800416 	blt	r4,r2,80924 <___vfprintf_internal_r+0x1dc>
   80914:	01001bc4 	movi	r4,111
   80918:	1100c21e 	bne	r2,r4,80c24 <___vfprintf_internal_r+0x4dc>
   8091c:	05400204 	movi	r21,8
   80920:	00000e06 	br	8095c <___vfprintf_internal_r+0x214>
   80924:	01001d44 	movi	r4,117
   80928:	11000c26 	beq	r2,r4,8095c <___vfprintf_internal_r+0x214>
   8092c:	01001e04 	movi	r4,120
   80930:	11000926 	beq	r2,r4,80958 <___vfprintf_internal_r+0x210>
   80934:	0000bb06 	br	80c24 <___vfprintf_internal_r+0x4dc>
   80938:	b5000104 	addi	r20,r22,4
   8093c:	b8000726 	beq	r23,zero,8095c <___vfprintf_internal_r+0x214>
   80940:	dd000d15 	stw	r20,52(sp)
   80944:	b5800017 	ldw	r22,0(r22)
   80948:	b000080e 	bge	r22,zero,8096c <___vfprintf_internal_r+0x224>
   8094c:	05adc83a 	sub	r22,zero,r22
   80950:	02800044 	movi	r10,1
   80954:	00000606 	br	80970 <___vfprintf_internal_r+0x228>
   80958:	05400404 	movi	r21,16
   8095c:	b0c00104 	addi	r3,r22,4
   80960:	d8c00d15 	stw	r3,52(sp)
   80964:	b5800017 	ldw	r22,0(r22)
   80968:	002f883a 	mov	r23,zero
   8096c:	0015883a 	mov	r10,zero
   80970:	d829883a 	mov	r20,sp
   80974:	b0001426 	beq	r22,zero,809c8 <___vfprintf_internal_r+0x280>
   80978:	b009883a 	mov	r4,r22
   8097c:	a80b883a 	mov	r5,r21
   80980:	da801015 	stw	r10,64(sp)
   80984:	0080e900 	call	80e90 <__udivsi3>
   80988:	1549383a 	mul	r4,r2,r21
   8098c:	00c00244 	movi	r3,9
   80990:	da801017 	ldw	r10,64(sp)
   80994:	b12dc83a 	sub	r22,r22,r4
   80998:	1d800216 	blt	r3,r22,809a4 <___vfprintf_internal_r+0x25c>
   8099c:	b5800c04 	addi	r22,r22,48
   809a0:	00000506 	br	809b8 <___vfprintf_internal_r+0x270>
   809a4:	d8c00e17 	ldw	r3,56(sp)
   809a8:	18000226 	beq	r3,zero,809b4 <___vfprintf_internal_r+0x26c>
   809ac:	b5800dc4 	addi	r22,r22,55
   809b0:	00000106 	br	809b8 <___vfprintf_internal_r+0x270>
   809b4:	b58015c4 	addi	r22,r22,87
   809b8:	a5800005 	stb	r22,0(r20)
   809bc:	a5000044 	addi	r20,r20,1
   809c0:	102d883a 	mov	r22,r2
   809c4:	003feb06 	br	80974 <__alt_data_end+0xfffb2774>
   809c8:	a6c7c83a 	sub	r3,r20,sp
   809cc:	d8c00a15 	stw	r3,40(sp)
   809d0:	90c5c83a 	sub	r2,r18,r3
   809d4:	00800a0e 	bge	zero,r2,80a00 <___vfprintf_internal_r+0x2b8>
   809d8:	a085883a 	add	r2,r20,r2
   809dc:	01400c04 	movi	r5,48
   809e0:	d8c00917 	ldw	r3,36(sp)
   809e4:	a009883a 	mov	r4,r20
   809e8:	a0c0032e 	bgeu	r20,r3,809f8 <___vfprintf_internal_r+0x2b0>
   809ec:	a5000044 	addi	r20,r20,1
   809f0:	21400005 	stb	r5,0(r4)
   809f4:	a0bffa1e 	bne	r20,r2,809e0 <__alt_data_end+0xfffb27e0>
   809f8:	a6c7c83a 	sub	r3,r20,sp
   809fc:	d8c00a15 	stw	r3,40(sp)
   80a00:	d8c00a17 	ldw	r3,40(sp)
   80a04:	50d3883a 	add	r9,r10,r3
   80a08:	d8c00b17 	ldw	r3,44(sp)
   80a0c:	8a6dc83a 	sub	r22,r17,r9
   80a10:	18001726 	beq	r3,zero,80a70 <___vfprintf_internal_r+0x328>
   80a14:	50000a26 	beq	r10,zero,80a40 <___vfprintf_internal_r+0x2f8>
   80a18:	00800b44 	movi	r2,45
   80a1c:	d8800805 	stb	r2,32(sp)
   80a20:	e0800117 	ldw	r2,4(fp)
   80a24:	01c00044 	movi	r7,1
   80a28:	d9800804 	addi	r6,sp,32
   80a2c:	e00b883a 	mov	r5,fp
   80a30:	9809883a 	mov	r4,r19
   80a34:	103ee83a 	callr	r2
   80a38:	10004d1e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80a3c:	84000044 	addi	r16,r16,1
   80a40:	0580070e 	bge	zero,r22,80a60 <___vfprintf_internal_r+0x318>
   80a44:	b00f883a 	mov	r7,r22
   80a48:	01800c04 	movi	r6,48
   80a4c:	e00b883a 	mov	r5,fp
   80a50:	9809883a 	mov	r4,r19
   80a54:	00806dc0 	call	806dc <print_repeat>
   80a58:	1000451e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80a5c:	85a1883a 	add	r16,r16,r22
   80a60:	d8c00a17 	ldw	r3,40(sp)
   80a64:	a013883a 	mov	r9,r20
   80a68:	1d2dc83a 	sub	r22,r3,r20
   80a6c:	00002206 	br	80af8 <___vfprintf_internal_r+0x3b0>
   80a70:	0580090e 	bge	zero,r22,80a98 <___vfprintf_internal_r+0x350>
   80a74:	b00f883a 	mov	r7,r22
   80a78:	01800804 	movi	r6,32
   80a7c:	e00b883a 	mov	r5,fp
   80a80:	9809883a 	mov	r4,r19
   80a84:	da801015 	stw	r10,64(sp)
   80a88:	00806dc0 	call	806dc <print_repeat>
   80a8c:	da801017 	ldw	r10,64(sp)
   80a90:	1000371e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80a94:	85a1883a 	add	r16,r16,r22
   80a98:	503ff126 	beq	r10,zero,80a60 <__alt_data_end+0xfffb2860>
   80a9c:	00800b44 	movi	r2,45
   80aa0:	d8800805 	stb	r2,32(sp)
   80aa4:	e0800117 	ldw	r2,4(fp)
   80aa8:	01c00044 	movi	r7,1
   80aac:	d9800804 	addi	r6,sp,32
   80ab0:	e00b883a 	mov	r5,fp
   80ab4:	9809883a 	mov	r4,r19
   80ab8:	103ee83a 	callr	r2
   80abc:	10002c1e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80ac0:	84000044 	addi	r16,r16,1
   80ac4:	003fe606 	br	80a60 <__alt_data_end+0xfffb2860>
   80ac8:	4a7fffc4 	addi	r9,r9,-1
   80acc:	48800003 	ldbu	r2,0(r9)
   80ad0:	01c00044 	movi	r7,1
   80ad4:	d9800804 	addi	r6,sp,32
   80ad8:	d8800805 	stb	r2,32(sp)
   80adc:	e0800117 	ldw	r2,4(fp)
   80ae0:	e00b883a 	mov	r5,fp
   80ae4:	da401015 	stw	r9,64(sp)
   80ae8:	9809883a 	mov	r4,r19
   80aec:	103ee83a 	callr	r2
   80af0:	da401017 	ldw	r9,64(sp)
   80af4:	10001e1e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80af8:	8245c83a 	sub	r2,r16,r9
   80afc:	4d89883a 	add	r4,r9,r22
   80b00:	a085883a 	add	r2,r20,r2
   80b04:	013ff016 	blt	zero,r4,80ac8 <__alt_data_end+0xfffb28c8>
   80b08:	1021883a 	mov	r16,r2
   80b0c:	dd800d17 	ldw	r22,52(sp)
   80b10:	00004406 	br	80c24 <___vfprintf_internal_r+0x4dc>
   80b14:	00800044 	movi	r2,1
   80b18:	1440080e 	bge	r2,r17,80b3c <___vfprintf_internal_r+0x3f4>
   80b1c:	8d3fffc4 	addi	r20,r17,-1
   80b20:	a00f883a 	mov	r7,r20
   80b24:	01800804 	movi	r6,32
   80b28:	e00b883a 	mov	r5,fp
   80b2c:	9809883a 	mov	r4,r19
   80b30:	00806dc0 	call	806dc <print_repeat>
   80b34:	10000e1e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80b38:	8521883a 	add	r16,r16,r20
   80b3c:	b0800017 	ldw	r2,0(r22)
   80b40:	01c00044 	movi	r7,1
   80b44:	d80d883a 	mov	r6,sp
   80b48:	d8800005 	stb	r2,0(sp)
   80b4c:	e0800117 	ldw	r2,4(fp)
   80b50:	e00b883a 	mov	r5,fp
   80b54:	9809883a 	mov	r4,r19
   80b58:	b5000104 	addi	r20,r22,4
   80b5c:	103ee83a 	callr	r2
   80b60:	1000031e 	bne	r2,zero,80b70 <___vfprintf_internal_r+0x428>
   80b64:	84000044 	addi	r16,r16,1
   80b68:	a02d883a 	mov	r22,r20
   80b6c:	00002d06 	br	80c24 <___vfprintf_internal_r+0x4dc>
   80b70:	00bfffc4 	movi	r2,-1
   80b74:	00003106 	br	80c3c <___vfprintf_internal_r+0x4f4>
   80b78:	b5000017 	ldw	r20,0(r22)
   80b7c:	b0c00104 	addi	r3,r22,4
   80b80:	d8c00a15 	stw	r3,40(sp)
   80b84:	a009883a 	mov	r4,r20
   80b88:	00806c00 	call	806c0 <strlen>
   80b8c:	8893c83a 	sub	r9,r17,r2
   80b90:	102d883a 	mov	r22,r2
   80b94:	0240090e 	bge	zero,r9,80bbc <___vfprintf_internal_r+0x474>
   80b98:	480f883a 	mov	r7,r9
   80b9c:	01800804 	movi	r6,32
   80ba0:	e00b883a 	mov	r5,fp
   80ba4:	9809883a 	mov	r4,r19
   80ba8:	da401015 	stw	r9,64(sp)
   80bac:	00806dc0 	call	806dc <print_repeat>
   80bb0:	da401017 	ldw	r9,64(sp)
   80bb4:	103fee1e 	bne	r2,zero,80b70 <__alt_data_end+0xfffb2970>
   80bb8:	8261883a 	add	r16,r16,r9
   80bbc:	e0800117 	ldw	r2,4(fp)
   80bc0:	b00f883a 	mov	r7,r22
   80bc4:	a00d883a 	mov	r6,r20
   80bc8:	e00b883a 	mov	r5,fp
   80bcc:	9809883a 	mov	r4,r19
   80bd0:	103ee83a 	callr	r2
   80bd4:	103fe61e 	bne	r2,zero,80b70 <__alt_data_end+0xfffb2970>
   80bd8:	85a1883a 	add	r16,r16,r22
   80bdc:	dd800a17 	ldw	r22,40(sp)
   80be0:	00001006 	br	80c24 <___vfprintf_internal_r+0x4dc>
   80be4:	05c00044 	movi	r23,1
   80be8:	04bfffc4 	movi	r18,-1
   80bec:	d8000e15 	stw	zero,56(sp)
   80bf0:	05400284 	movi	r21,10
   80bf4:	9023883a 	mov	r17,r18
   80bf8:	d8000c15 	stw	zero,48(sp)
   80bfc:	d8000b15 	stw	zero,44(sp)
   80c00:	b829883a 	mov	r20,r23
   80c04:	00000806 	br	80c28 <___vfprintf_internal_r+0x4e0>
   80c08:	dd000b15 	stw	r20,44(sp)
   80c0c:	05000084 	movi	r20,2
   80c10:	00000506 	br	80c28 <___vfprintf_internal_r+0x4e0>
   80c14:	00c00044 	movi	r3,1
   80c18:	d8c00c15 	stw	r3,48(sp)
   80c1c:	050000c4 	movi	r20,3
   80c20:	00000106 	br	80c28 <___vfprintf_internal_r+0x4e0>
   80c24:	0029883a 	mov	r20,zero
   80c28:	d8c00f17 	ldw	r3,60(sp)
   80c2c:	18c00044 	addi	r3,r3,1
   80c30:	d8c00f15 	stw	r3,60(sp)
   80c34:	003ede06 	br	807b0 <__alt_data_end+0xfffb25b0>
   80c38:	8005883a 	mov	r2,r16
   80c3c:	dfc01a17 	ldw	ra,104(sp)
   80c40:	df001917 	ldw	fp,100(sp)
   80c44:	ddc01817 	ldw	r23,96(sp)
   80c48:	dd801717 	ldw	r22,92(sp)
   80c4c:	dd401617 	ldw	r21,88(sp)
   80c50:	dd001517 	ldw	r20,84(sp)
   80c54:	dcc01417 	ldw	r19,80(sp)
   80c58:	dc801317 	ldw	r18,76(sp)
   80c5c:	dc401217 	ldw	r17,72(sp)
   80c60:	dc001117 	ldw	r16,68(sp)
   80c64:	dec01b04 	addi	sp,sp,108
   80c68:	f800283a 	ret

00080c6c <__vfprintf_internal>:
   80c6c:	00800234 	movhi	r2,8
   80c70:	10912204 	addi	r2,r2,17544
   80c74:	300f883a 	mov	r7,r6
   80c78:	280d883a 	mov	r6,r5
   80c7c:	200b883a 	mov	r5,r4
   80c80:	11000017 	ldw	r4,0(r2)
   80c84:	00807481 	jmpi	80748 <___vfprintf_internal_r>

00080c88 <__sfvwrite_small_dev>:
   80c88:	2880000b 	ldhu	r2,0(r5)
   80c8c:	1080020c 	andi	r2,r2,8
   80c90:	10002126 	beq	r2,zero,80d18 <__sfvwrite_small_dev+0x90>
   80c94:	2880008f 	ldh	r2,2(r5)
   80c98:	defffa04 	addi	sp,sp,-24
   80c9c:	dc000015 	stw	r16,0(sp)
   80ca0:	dfc00515 	stw	ra,20(sp)
   80ca4:	dd000415 	stw	r20,16(sp)
   80ca8:	dcc00315 	stw	r19,12(sp)
   80cac:	dc800215 	stw	r18,8(sp)
   80cb0:	dc400115 	stw	r17,4(sp)
   80cb4:	2821883a 	mov	r16,r5
   80cb8:	10001216 	blt	r2,zero,80d04 <__sfvwrite_small_dev+0x7c>
   80cbc:	2027883a 	mov	r19,r4
   80cc0:	3025883a 	mov	r18,r6
   80cc4:	3823883a 	mov	r17,r7
   80cc8:	05010004 	movi	r20,1024
   80ccc:	04400b0e 	bge	zero,r17,80cfc <__sfvwrite_small_dev+0x74>
   80cd0:	880f883a 	mov	r7,r17
   80cd4:	a440010e 	bge	r20,r17,80cdc <__sfvwrite_small_dev+0x54>
   80cd8:	01c10004 	movi	r7,1024
   80cdc:	8140008f 	ldh	r5,2(r16)
   80ce0:	900d883a 	mov	r6,r18
   80ce4:	9809883a 	mov	r4,r19
   80ce8:	0080d400 	call	80d40 <_write_r>
   80cec:	0080050e 	bge	zero,r2,80d04 <__sfvwrite_small_dev+0x7c>
   80cf0:	88a3c83a 	sub	r17,r17,r2
   80cf4:	90a5883a 	add	r18,r18,r2
   80cf8:	003ff406 	br	80ccc <__alt_data_end+0xfffb2acc>
   80cfc:	0005883a 	mov	r2,zero
   80d00:	00000706 	br	80d20 <__sfvwrite_small_dev+0x98>
   80d04:	8080000b 	ldhu	r2,0(r16)
   80d08:	10801014 	ori	r2,r2,64
   80d0c:	8080000d 	sth	r2,0(r16)
   80d10:	00bfffc4 	movi	r2,-1
   80d14:	00000206 	br	80d20 <__sfvwrite_small_dev+0x98>
   80d18:	00bfffc4 	movi	r2,-1
   80d1c:	f800283a 	ret
   80d20:	dfc00517 	ldw	ra,20(sp)
   80d24:	dd000417 	ldw	r20,16(sp)
   80d28:	dcc00317 	ldw	r19,12(sp)
   80d2c:	dc800217 	ldw	r18,8(sp)
   80d30:	dc400117 	ldw	r17,4(sp)
   80d34:	dc000017 	ldw	r16,0(sp)
   80d38:	dec00604 	addi	sp,sp,24
   80d3c:	f800283a 	ret

00080d40 <_write_r>:
   80d40:	defffd04 	addi	sp,sp,-12
   80d44:	dc000015 	stw	r16,0(sp)
   80d48:	04000234 	movhi	r16,8
   80d4c:	dc400115 	stw	r17,4(sp)
   80d50:	8415fc04 	addi	r16,r16,22512
   80d54:	2023883a 	mov	r17,r4
   80d58:	2809883a 	mov	r4,r5
   80d5c:	300b883a 	mov	r5,r6
   80d60:	380d883a 	mov	r6,r7
   80d64:	dfc00215 	stw	ra,8(sp)
   80d68:	80000015 	stw	zero,0(r16)
   80d6c:	00810f40 	call	810f4 <write>
   80d70:	00ffffc4 	movi	r3,-1
   80d74:	10c0031e 	bne	r2,r3,80d84 <_write_r+0x44>
   80d78:	80c00017 	ldw	r3,0(r16)
   80d7c:	18000126 	beq	r3,zero,80d84 <_write_r+0x44>
   80d80:	88c00015 	stw	r3,0(r17)
   80d84:	dfc00217 	ldw	ra,8(sp)
   80d88:	dc400117 	ldw	r17,4(sp)
   80d8c:	dc000017 	ldw	r16,0(sp)
   80d90:	dec00304 	addi	sp,sp,12
   80d94:	f800283a 	ret

00080d98 <__divsi3>:
   80d98:	20001b16 	blt	r4,zero,80e08 <__divsi3+0x70>
   80d9c:	000f883a 	mov	r7,zero
   80da0:	28001616 	blt	r5,zero,80dfc <__divsi3+0x64>
   80da4:	200d883a 	mov	r6,r4
   80da8:	29001a2e 	bgeu	r5,r4,80e14 <__divsi3+0x7c>
   80dac:	00800804 	movi	r2,32
   80db0:	00c00044 	movi	r3,1
   80db4:	00000106 	br	80dbc <__divsi3+0x24>
   80db8:	10000d26 	beq	r2,zero,80df0 <__divsi3+0x58>
   80dbc:	294b883a 	add	r5,r5,r5
   80dc0:	10bfffc4 	addi	r2,r2,-1
   80dc4:	18c7883a 	add	r3,r3,r3
   80dc8:	293ffb36 	bltu	r5,r4,80db8 <__alt_data_end+0xfffb2bb8>
   80dcc:	0005883a 	mov	r2,zero
   80dd0:	18000726 	beq	r3,zero,80df0 <__divsi3+0x58>
   80dd4:	0005883a 	mov	r2,zero
   80dd8:	31400236 	bltu	r6,r5,80de4 <__divsi3+0x4c>
   80ddc:	314dc83a 	sub	r6,r6,r5
   80de0:	10c4b03a 	or	r2,r2,r3
   80de4:	1806d07a 	srli	r3,r3,1
   80de8:	280ad07a 	srli	r5,r5,1
   80dec:	183ffa1e 	bne	r3,zero,80dd8 <__alt_data_end+0xfffb2bd8>
   80df0:	38000126 	beq	r7,zero,80df8 <__divsi3+0x60>
   80df4:	0085c83a 	sub	r2,zero,r2
   80df8:	f800283a 	ret
   80dfc:	014bc83a 	sub	r5,zero,r5
   80e00:	39c0005c 	xori	r7,r7,1
   80e04:	003fe706 	br	80da4 <__alt_data_end+0xfffb2ba4>
   80e08:	0109c83a 	sub	r4,zero,r4
   80e0c:	01c00044 	movi	r7,1
   80e10:	003fe306 	br	80da0 <__alt_data_end+0xfffb2ba0>
   80e14:	00c00044 	movi	r3,1
   80e18:	003fee06 	br	80dd4 <__alt_data_end+0xfffb2bd4>

00080e1c <__modsi3>:
   80e1c:	20001716 	blt	r4,zero,80e7c <__modsi3+0x60>
   80e20:	000f883a 	mov	r7,zero
   80e24:	2005883a 	mov	r2,r4
   80e28:	28001216 	blt	r5,zero,80e74 <__modsi3+0x58>
   80e2c:	2900162e 	bgeu	r5,r4,80e88 <__modsi3+0x6c>
   80e30:	01800804 	movi	r6,32
   80e34:	00c00044 	movi	r3,1
   80e38:	00000106 	br	80e40 <__modsi3+0x24>
   80e3c:	30000a26 	beq	r6,zero,80e68 <__modsi3+0x4c>
   80e40:	294b883a 	add	r5,r5,r5
   80e44:	31bfffc4 	addi	r6,r6,-1
   80e48:	18c7883a 	add	r3,r3,r3
   80e4c:	293ffb36 	bltu	r5,r4,80e3c <__alt_data_end+0xfffb2c3c>
   80e50:	18000526 	beq	r3,zero,80e68 <__modsi3+0x4c>
   80e54:	1806d07a 	srli	r3,r3,1
   80e58:	11400136 	bltu	r2,r5,80e60 <__modsi3+0x44>
   80e5c:	1145c83a 	sub	r2,r2,r5
   80e60:	280ad07a 	srli	r5,r5,1
   80e64:	183ffb1e 	bne	r3,zero,80e54 <__alt_data_end+0xfffb2c54>
   80e68:	38000126 	beq	r7,zero,80e70 <__modsi3+0x54>
   80e6c:	0085c83a 	sub	r2,zero,r2
   80e70:	f800283a 	ret
   80e74:	014bc83a 	sub	r5,zero,r5
   80e78:	003fec06 	br	80e2c <__alt_data_end+0xfffb2c2c>
   80e7c:	0109c83a 	sub	r4,zero,r4
   80e80:	01c00044 	movi	r7,1
   80e84:	003fe706 	br	80e24 <__alt_data_end+0xfffb2c24>
   80e88:	00c00044 	movi	r3,1
   80e8c:	003ff106 	br	80e54 <__alt_data_end+0xfffb2c54>

00080e90 <__udivsi3>:
   80e90:	200d883a 	mov	r6,r4
   80e94:	2900152e 	bgeu	r5,r4,80eec <__udivsi3+0x5c>
   80e98:	28001416 	blt	r5,zero,80eec <__udivsi3+0x5c>
   80e9c:	00800804 	movi	r2,32
   80ea0:	00c00044 	movi	r3,1
   80ea4:	00000206 	br	80eb0 <__udivsi3+0x20>
   80ea8:	10000e26 	beq	r2,zero,80ee4 <__udivsi3+0x54>
   80eac:	28000516 	blt	r5,zero,80ec4 <__udivsi3+0x34>
   80eb0:	294b883a 	add	r5,r5,r5
   80eb4:	10bfffc4 	addi	r2,r2,-1
   80eb8:	18c7883a 	add	r3,r3,r3
   80ebc:	293ffa36 	bltu	r5,r4,80ea8 <__alt_data_end+0xfffb2ca8>
   80ec0:	18000826 	beq	r3,zero,80ee4 <__udivsi3+0x54>
   80ec4:	0005883a 	mov	r2,zero
   80ec8:	31400236 	bltu	r6,r5,80ed4 <__udivsi3+0x44>
   80ecc:	314dc83a 	sub	r6,r6,r5
   80ed0:	10c4b03a 	or	r2,r2,r3
   80ed4:	1806d07a 	srli	r3,r3,1
   80ed8:	280ad07a 	srli	r5,r5,1
   80edc:	183ffa1e 	bne	r3,zero,80ec8 <__alt_data_end+0xfffb2cc8>
   80ee0:	f800283a 	ret
   80ee4:	0005883a 	mov	r2,zero
   80ee8:	f800283a 	ret
   80eec:	00c00044 	movi	r3,1
   80ef0:	003ff406 	br	80ec4 <__alt_data_end+0xfffb2cc4>

00080ef4 <__umodsi3>:
   80ef4:	2005883a 	mov	r2,r4
   80ef8:	2900122e 	bgeu	r5,r4,80f44 <__umodsi3+0x50>
   80efc:	28001116 	blt	r5,zero,80f44 <__umodsi3+0x50>
   80f00:	01800804 	movi	r6,32
   80f04:	00c00044 	movi	r3,1
   80f08:	00000206 	br	80f14 <__umodsi3+0x20>
   80f0c:	30000c26 	beq	r6,zero,80f40 <__umodsi3+0x4c>
   80f10:	28000516 	blt	r5,zero,80f28 <__umodsi3+0x34>
   80f14:	294b883a 	add	r5,r5,r5
   80f18:	31bfffc4 	addi	r6,r6,-1
   80f1c:	18c7883a 	add	r3,r3,r3
   80f20:	293ffa36 	bltu	r5,r4,80f0c <__alt_data_end+0xfffb2d0c>
   80f24:	18000626 	beq	r3,zero,80f40 <__umodsi3+0x4c>
   80f28:	1806d07a 	srli	r3,r3,1
   80f2c:	11400136 	bltu	r2,r5,80f34 <__umodsi3+0x40>
   80f30:	1145c83a 	sub	r2,r2,r5
   80f34:	280ad07a 	srli	r5,r5,1
   80f38:	183ffb1e 	bne	r3,zero,80f28 <__alt_data_end+0xfffb2d28>
   80f3c:	f800283a 	ret
   80f40:	f800283a 	ret
   80f44:	00c00044 	movi	r3,1
   80f48:	003ff706 	br	80f28 <__alt_data_end+0xfffb2d28>

00080f4c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80f4c:	defffc04 	addi	sp,sp,-16
   80f50:	df000315 	stw	fp,12(sp)
   80f54:	df000304 	addi	fp,sp,12
   80f58:	e13ffd15 	stw	r4,-12(fp)
   80f5c:	e17ffe15 	stw	r5,-8(fp)
   80f60:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80f64:	e0fffe17 	ldw	r3,-8(fp)
   80f68:	e0bffd17 	ldw	r2,-12(fp)
   80f6c:	18800c26 	beq	r3,r2,80fa0 <alt_load_section+0x54>
  {
    while( to != end )
   80f70:	00000806 	br	80f94 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80f74:	e0bffe17 	ldw	r2,-8(fp)
   80f78:	10c00104 	addi	r3,r2,4
   80f7c:	e0fffe15 	stw	r3,-8(fp)
   80f80:	e0fffd17 	ldw	r3,-12(fp)
   80f84:	19000104 	addi	r4,r3,4
   80f88:	e13ffd15 	stw	r4,-12(fp)
   80f8c:	18c00017 	ldw	r3,0(r3)
   80f90:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80f94:	e0fffe17 	ldw	r3,-8(fp)
   80f98:	e0bfff17 	ldw	r2,-4(fp)
   80f9c:	18bff51e 	bne	r3,r2,80f74 <__alt_data_end+0xfffb2d74>
    {
      *to++ = *from++;
    }
  }
}
   80fa0:	0001883a 	nop
   80fa4:	e037883a 	mov	sp,fp
   80fa8:	df000017 	ldw	fp,0(sp)
   80fac:	dec00104 	addi	sp,sp,4
   80fb0:	f800283a 	ret

00080fb4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80fb4:	defffe04 	addi	sp,sp,-8
   80fb8:	dfc00115 	stw	ra,4(sp)
   80fbc:	df000015 	stw	fp,0(sp)
   80fc0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80fc4:	01800234 	movhi	r6,8
   80fc8:	31912c04 	addi	r6,r6,17584
   80fcc:	01400234 	movhi	r5,8
   80fd0:	294c5c04 	addi	r5,r5,12656
   80fd4:	01000234 	movhi	r4,8
   80fd8:	21112c04 	addi	r4,r4,17584
   80fdc:	0080f4c0 	call	80f4c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80fe0:	01800234 	movhi	r6,8
   80fe4:	31809104 	addi	r6,r6,580
   80fe8:	01400234 	movhi	r5,8
   80fec:	29400804 	addi	r5,r5,32
   80ff0:	01000234 	movhi	r4,8
   80ff4:	21000804 	addi	r4,r4,32
   80ff8:	0080f4c0 	call	80f4c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80ffc:	01800234 	movhi	r6,8
   81000:	318c5c04 	addi	r6,r6,12656
   81004:	01400234 	movhi	r5,8
   81008:	294c3c04 	addi	r5,r5,12528
   8100c:	01000234 	movhi	r4,8
   81010:	210c3c04 	addi	r4,r4,12528
   81014:	0080f4c0 	call	80f4c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   81018:	00820e40 	call	820e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8101c:	00822dc0 	call	822dc <alt_icache_flush_all>
}
   81020:	0001883a 	nop
   81024:	e037883a 	mov	sp,fp
   81028:	dfc00117 	ldw	ra,4(sp)
   8102c:	df000017 	ldw	fp,0(sp)
   81030:	dec00204 	addi	sp,sp,8
   81034:	f800283a 	ret

00081038 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   81038:	defffd04 	addi	sp,sp,-12
   8103c:	dfc00215 	stw	ra,8(sp)
   81040:	df000115 	stw	fp,4(sp)
   81044:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   81048:	0009883a 	mov	r4,zero
   8104c:	00812240 	call	81224 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   81050:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   81054:	008125c0 	call	8125c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   81058:	01800234 	movhi	r6,8
   8105c:	318c4c04 	addi	r6,r6,12592
   81060:	01400234 	movhi	r5,8
   81064:	294c4c04 	addi	r5,r5,12592
   81068:	01000234 	movhi	r4,8
   8106c:	210c4c04 	addi	r4,r4,12592
   81070:	00827400 	call	82740 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   81074:	d0a4dd17 	ldw	r2,-27788(gp)
   81078:	d0e4de17 	ldw	r3,-27784(gp)
   8107c:	d124df17 	ldw	r4,-27780(gp)
   81080:	200d883a 	mov	r6,r4
   81084:	180b883a 	mov	r5,r3
   81088:	1009883a 	mov	r4,r2
   8108c:	00804a40 	call	804a4 <main>
   81090:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   81094:	01000044 	movi	r4,1
   81098:	00820140 	call	82014 <close>
  exit (result);
   8109c:	e13fff17 	ldw	r4,-4(fp)
   810a0:	0082eb40 	call	82eb4 <exit>

000810a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   810a4:	defffe04 	addi	sp,sp,-8
   810a8:	dfc00115 	stw	ra,4(sp)
   810ac:	df000015 	stw	fp,0(sp)
   810b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   810b4:	00800234 	movhi	r2,8
   810b8:	10912904 	addi	r2,r2,17572
   810bc:	10800017 	ldw	r2,0(r2)
   810c0:	10000526 	beq	r2,zero,810d8 <alt_get_errno+0x34>
   810c4:	00800234 	movhi	r2,8
   810c8:	10912904 	addi	r2,r2,17572
   810cc:	10800017 	ldw	r2,0(r2)
   810d0:	103ee83a 	callr	r2
   810d4:	00000206 	br	810e0 <alt_get_errno+0x3c>
   810d8:	00800234 	movhi	r2,8
   810dc:	1095fc04 	addi	r2,r2,22512
}
   810e0:	e037883a 	mov	sp,fp
   810e4:	dfc00117 	ldw	ra,4(sp)
   810e8:	df000017 	ldw	fp,0(sp)
   810ec:	dec00204 	addi	sp,sp,8
   810f0:	f800283a 	ret

000810f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   810f4:	defff904 	addi	sp,sp,-28
   810f8:	dfc00615 	stw	ra,24(sp)
   810fc:	df000515 	stw	fp,20(sp)
   81100:	df000504 	addi	fp,sp,20
   81104:	e13ffd15 	stw	r4,-12(fp)
   81108:	e17ffe15 	stw	r5,-8(fp)
   8110c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   81110:	e0bffd17 	ldw	r2,-12(fp)
   81114:	10000616 	blt	r2,zero,81130 <write+0x3c>
   81118:	e0bffd17 	ldw	r2,-12(fp)
   8111c:	10c00324 	muli	r3,r2,12
   81120:	00800234 	movhi	r2,8
   81124:	1090c104 	addi	r2,r2,17156
   81128:	1885883a 	add	r2,r3,r2
   8112c:	00000106 	br	81134 <write+0x40>
   81130:	0005883a 	mov	r2,zero
   81134:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   81138:	e0bffb17 	ldw	r2,-20(fp)
   8113c:	10002126 	beq	r2,zero,811c4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   81140:	e0bffb17 	ldw	r2,-20(fp)
   81144:	10800217 	ldw	r2,8(r2)
   81148:	108000cc 	andi	r2,r2,3
   8114c:	10001826 	beq	r2,zero,811b0 <write+0xbc>
   81150:	e0bffb17 	ldw	r2,-20(fp)
   81154:	10800017 	ldw	r2,0(r2)
   81158:	10800617 	ldw	r2,24(r2)
   8115c:	10001426 	beq	r2,zero,811b0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   81160:	e0bffb17 	ldw	r2,-20(fp)
   81164:	10800017 	ldw	r2,0(r2)
   81168:	10800617 	ldw	r2,24(r2)
   8116c:	e0ffff17 	ldw	r3,-4(fp)
   81170:	180d883a 	mov	r6,r3
   81174:	e17ffe17 	ldw	r5,-8(fp)
   81178:	e13ffb17 	ldw	r4,-20(fp)
   8117c:	103ee83a 	callr	r2
   81180:	e0bffc15 	stw	r2,-16(fp)
   81184:	e0bffc17 	ldw	r2,-16(fp)
   81188:	1000070e 	bge	r2,zero,811a8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8118c:	00810a40 	call	810a4 <alt_get_errno>
   81190:	1007883a 	mov	r3,r2
   81194:	e0bffc17 	ldw	r2,-16(fp)
   81198:	0085c83a 	sub	r2,zero,r2
   8119c:	18800015 	stw	r2,0(r3)
        return -1;
   811a0:	00bfffc4 	movi	r2,-1
   811a4:	00000c06 	br	811d8 <write+0xe4>
      }
      return rval;
   811a8:	e0bffc17 	ldw	r2,-16(fp)
   811ac:	00000a06 	br	811d8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   811b0:	00810a40 	call	810a4 <alt_get_errno>
   811b4:	1007883a 	mov	r3,r2
   811b8:	00800344 	movi	r2,13
   811bc:	18800015 	stw	r2,0(r3)
   811c0:	00000406 	br	811d4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   811c4:	00810a40 	call	810a4 <alt_get_errno>
   811c8:	1007883a 	mov	r3,r2
   811cc:	00801444 	movi	r2,81
   811d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   811d4:	00bfffc4 	movi	r2,-1
}
   811d8:	e037883a 	mov	sp,fp
   811dc:	dfc00117 	ldw	ra,4(sp)
   811e0:	df000017 	ldw	fp,0(sp)
   811e4:	dec00204 	addi	sp,sp,8
   811e8:	f800283a 	ret

000811ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   811ec:	defffd04 	addi	sp,sp,-12
   811f0:	dfc00215 	stw	ra,8(sp)
   811f4:	df000115 	stw	fp,4(sp)
   811f8:	df000104 	addi	fp,sp,4
   811fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   81200:	01400234 	movhi	r5,8
   81204:	29512604 	addi	r5,r5,17560
   81208:	e13fff17 	ldw	r4,-4(fp)
   8120c:	00821a80 	call	821a8 <alt_dev_llist_insert>
}
   81210:	e037883a 	mov	sp,fp
   81214:	dfc00117 	ldw	ra,4(sp)
   81218:	df000017 	ldw	fp,0(sp)
   8121c:	dec00204 	addi	sp,sp,8
   81220:	f800283a 	ret

00081224 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   81224:	defffd04 	addi	sp,sp,-12
   81228:	dfc00215 	stw	ra,8(sp)
   8122c:	df000115 	stw	fp,4(sp)
   81230:	df000104 	addi	fp,sp,4
   81234:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   81238:	0082c380 	call	82c38 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8123c:	00800044 	movi	r2,1
   81240:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   81244:	0001883a 	nop
   81248:	e037883a 	mov	sp,fp
   8124c:	dfc00117 	ldw	ra,4(sp)
   81250:	df000017 	ldw	fp,0(sp)
   81254:	dec00204 	addi	sp,sp,8
   81258:	f800283a 	ret

0008125c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8125c:	defffe04 	addi	sp,sp,-8
   81260:	dfc00115 	stw	ra,4(sp)
   81264:	df000015 	stw	fp,0(sp)
   81268:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8126c:	000d883a 	mov	r6,zero
   81270:	000b883a 	mov	r5,zero
   81274:	01000234 	movhi	r4,8
   81278:	210c9e04 	addi	r4,r4,12920
   8127c:	00814180 	call	81418 <altera_avalon_jtag_uart_init>
   81280:	01000234 	movhi	r4,8
   81284:	210c9404 	addi	r4,r4,12880
   81288:	00811ec0 	call	811ec <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   8128c:	0001883a 	nop
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
   81290:	01000234 	movhi	r4,8
   81294:	2110ac04 	addi	r4,r4,17072
   81298:	00811ec0 	call	811ec <alt_dev_reg>
}
   8129c:	0001883a 	nop
   812a0:	e037883a 	mov	sp,fp
   812a4:	dfc00117 	ldw	ra,4(sp)
   812a8:	df000017 	ldw	fp,0(sp)
   812ac:	dec00204 	addi	sp,sp,8
   812b0:	f800283a 	ret

000812b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   812b4:	defffa04 	addi	sp,sp,-24
   812b8:	dfc00515 	stw	ra,20(sp)
   812bc:	df000415 	stw	fp,16(sp)
   812c0:	df000404 	addi	fp,sp,16
   812c4:	e13ffd15 	stw	r4,-12(fp)
   812c8:	e17ffe15 	stw	r5,-8(fp)
   812cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   812d0:	e0bffd17 	ldw	r2,-12(fp)
   812d4:	10800017 	ldw	r2,0(r2)
   812d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   812dc:	e0bffc17 	ldw	r2,-16(fp)
   812e0:	10c00a04 	addi	r3,r2,40
   812e4:	e0bffd17 	ldw	r2,-12(fp)
   812e8:	10800217 	ldw	r2,8(r2)
   812ec:	100f883a 	mov	r7,r2
   812f0:	e1bfff17 	ldw	r6,-4(fp)
   812f4:	e17ffe17 	ldw	r5,-8(fp)
   812f8:	1809883a 	mov	r4,r3
   812fc:	00818ec0 	call	818ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   81300:	e037883a 	mov	sp,fp
   81304:	dfc00117 	ldw	ra,4(sp)
   81308:	df000017 	ldw	fp,0(sp)
   8130c:	dec00204 	addi	sp,sp,8
   81310:	f800283a 	ret

00081314 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   81314:	defffa04 	addi	sp,sp,-24
   81318:	dfc00515 	stw	ra,20(sp)
   8131c:	df000415 	stw	fp,16(sp)
   81320:	df000404 	addi	fp,sp,16
   81324:	e13ffd15 	stw	r4,-12(fp)
   81328:	e17ffe15 	stw	r5,-8(fp)
   8132c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81330:	e0bffd17 	ldw	r2,-12(fp)
   81334:	10800017 	ldw	r2,0(r2)
   81338:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8133c:	e0bffc17 	ldw	r2,-16(fp)
   81340:	10c00a04 	addi	r3,r2,40
   81344:	e0bffd17 	ldw	r2,-12(fp)
   81348:	10800217 	ldw	r2,8(r2)
   8134c:	100f883a 	mov	r7,r2
   81350:	e1bfff17 	ldw	r6,-4(fp)
   81354:	e17ffe17 	ldw	r5,-8(fp)
   81358:	1809883a 	mov	r4,r3
   8135c:	0081b080 	call	81b08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   81360:	e037883a 	mov	sp,fp
   81364:	dfc00117 	ldw	ra,4(sp)
   81368:	df000017 	ldw	fp,0(sp)
   8136c:	dec00204 	addi	sp,sp,8
   81370:	f800283a 	ret

00081374 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   81374:	defffc04 	addi	sp,sp,-16
   81378:	dfc00315 	stw	ra,12(sp)
   8137c:	df000215 	stw	fp,8(sp)
   81380:	df000204 	addi	fp,sp,8
   81384:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   81388:	e0bfff17 	ldw	r2,-4(fp)
   8138c:	10800017 	ldw	r2,0(r2)
   81390:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   81394:	e0bffe17 	ldw	r2,-8(fp)
   81398:	10c00a04 	addi	r3,r2,40
   8139c:	e0bfff17 	ldw	r2,-4(fp)
   813a0:	10800217 	ldw	r2,8(r2)
   813a4:	100b883a 	mov	r5,r2
   813a8:	1809883a 	mov	r4,r3
   813ac:	00817940 	call	81794 <altera_avalon_jtag_uart_close>
}
   813b0:	e037883a 	mov	sp,fp
   813b4:	dfc00117 	ldw	ra,4(sp)
   813b8:	df000017 	ldw	fp,0(sp)
   813bc:	dec00204 	addi	sp,sp,8
   813c0:	f800283a 	ret

000813c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   813c4:	defffa04 	addi	sp,sp,-24
   813c8:	dfc00515 	stw	ra,20(sp)
   813cc:	df000415 	stw	fp,16(sp)
   813d0:	df000404 	addi	fp,sp,16
   813d4:	e13ffd15 	stw	r4,-12(fp)
   813d8:	e17ffe15 	stw	r5,-8(fp)
   813dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   813e0:	e0bffd17 	ldw	r2,-12(fp)
   813e4:	10800017 	ldw	r2,0(r2)
   813e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   813ec:	e0bffc17 	ldw	r2,-16(fp)
   813f0:	10800a04 	addi	r2,r2,40
   813f4:	e1bfff17 	ldw	r6,-4(fp)
   813f8:	e17ffe17 	ldw	r5,-8(fp)
   813fc:	1009883a 	mov	r4,r2
   81400:	00817fc0 	call	817fc <altera_avalon_jtag_uart_ioctl>
}
   81404:	e037883a 	mov	sp,fp
   81408:	dfc00117 	ldw	ra,4(sp)
   8140c:	df000017 	ldw	fp,0(sp)
   81410:	dec00204 	addi	sp,sp,8
   81414:	f800283a 	ret

00081418 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   81418:	defffa04 	addi	sp,sp,-24
   8141c:	dfc00515 	stw	ra,20(sp)
   81420:	df000415 	stw	fp,16(sp)
   81424:	df000404 	addi	fp,sp,16
   81428:	e13ffd15 	stw	r4,-12(fp)
   8142c:	e17ffe15 	stw	r5,-8(fp)
   81430:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81434:	e0bffd17 	ldw	r2,-12(fp)
   81438:	00c00044 	movi	r3,1
   8143c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   81440:	e0bffd17 	ldw	r2,-12(fp)
   81444:	10800017 	ldw	r2,0(r2)
   81448:	10800104 	addi	r2,r2,4
   8144c:	1007883a 	mov	r3,r2
   81450:	e0bffd17 	ldw	r2,-12(fp)
   81454:	10800817 	ldw	r2,32(r2)
   81458:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8145c:	e0bffe17 	ldw	r2,-8(fp)
   81460:	e0ffff17 	ldw	r3,-4(fp)
   81464:	d8000015 	stw	zero,0(sp)
   81468:	e1fffd17 	ldw	r7,-12(fp)
   8146c:	01800234 	movhi	r6,8
   81470:	31853804 	addi	r6,r6,5344
   81474:	180b883a 	mov	r5,r3
   81478:	1009883a 	mov	r4,r2
   8147c:	00823100 	call	82310 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   81480:	e0bffd17 	ldw	r2,-12(fp)
   81484:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   81488:	e0bffd17 	ldw	r2,-12(fp)
   8148c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   81490:	00800234 	movhi	r2,8
   81494:	10960204 	addi	r2,r2,22536
   81498:	10800017 	ldw	r2,0(r2)
   8149c:	e1fffd17 	ldw	r7,-12(fp)
   814a0:	01800234 	movhi	r6,8
   814a4:	3185bb04 	addi	r6,r6,5868
   814a8:	100b883a 	mov	r5,r2
   814ac:	1809883a 	mov	r4,r3
   814b0:	0081e840 	call	81e84 <alt_alarm_start>
   814b4:	1000040e 	bge	r2,zero,814c8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   814b8:	e0fffd17 	ldw	r3,-12(fp)
   814bc:	00a00034 	movhi	r2,32768
   814c0:	10bfffc4 	addi	r2,r2,-1
   814c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   814c8:	0001883a 	nop
   814cc:	e037883a 	mov	sp,fp
   814d0:	dfc00117 	ldw	ra,4(sp)
   814d4:	df000017 	ldw	fp,0(sp)
   814d8:	dec00204 	addi	sp,sp,8
   814dc:	f800283a 	ret

000814e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   814e0:	defff804 	addi	sp,sp,-32
   814e4:	df000715 	stw	fp,28(sp)
   814e8:	df000704 	addi	fp,sp,28
   814ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   814f0:	e0bfff17 	ldw	r2,-4(fp)
   814f4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   814f8:	e0bffb17 	ldw	r2,-20(fp)
   814fc:	10800017 	ldw	r2,0(r2)
   81500:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   81504:	e0bffc17 	ldw	r2,-16(fp)
   81508:	10800104 	addi	r2,r2,4
   8150c:	10800037 	ldwio	r2,0(r2)
   81510:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   81514:	e0bffd17 	ldw	r2,-12(fp)
   81518:	1080c00c 	andi	r2,r2,768
   8151c:	10006d26 	beq	r2,zero,816d4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   81520:	e0bffd17 	ldw	r2,-12(fp)
   81524:	1080400c 	andi	r2,r2,256
   81528:	10003526 	beq	r2,zero,81600 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8152c:	00800074 	movhi	r2,1
   81530:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81534:	e0bffb17 	ldw	r2,-20(fp)
   81538:	10800a17 	ldw	r2,40(r2)
   8153c:	10800044 	addi	r2,r2,1
   81540:	1081ffcc 	andi	r2,r2,2047
   81544:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   81548:	e0bffb17 	ldw	r2,-20(fp)
   8154c:	10c00b17 	ldw	r3,44(r2)
   81550:	e0bffe17 	ldw	r2,-8(fp)
   81554:	18801526 	beq	r3,r2,815ac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   81558:	e0bffc17 	ldw	r2,-16(fp)
   8155c:	10800037 	ldwio	r2,0(r2)
   81560:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   81564:	e0bff917 	ldw	r2,-28(fp)
   81568:	10a0000c 	andi	r2,r2,32768
   8156c:	10001126 	beq	r2,zero,815b4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   81570:	e0bffb17 	ldw	r2,-20(fp)
   81574:	10800a17 	ldw	r2,40(r2)
   81578:	e0fff917 	ldw	r3,-28(fp)
   8157c:	1809883a 	mov	r4,r3
   81580:	e0fffb17 	ldw	r3,-20(fp)
   81584:	1885883a 	add	r2,r3,r2
   81588:	10800e04 	addi	r2,r2,56
   8158c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81590:	e0bffb17 	ldw	r2,-20(fp)
   81594:	10800a17 	ldw	r2,40(r2)
   81598:	10800044 	addi	r2,r2,1
   8159c:	10c1ffcc 	andi	r3,r2,2047
   815a0:	e0bffb17 	ldw	r2,-20(fp)
   815a4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   815a8:	003fe206 	br	81534 <__alt_data_end+0xfffb3334>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   815ac:	0001883a 	nop
   815b0:	00000106 	br	815b8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   815b4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   815b8:	e0bff917 	ldw	r2,-28(fp)
   815bc:	10bfffec 	andhi	r2,r2,65535
   815c0:	10000f26 	beq	r2,zero,81600 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   815c4:	e0bffb17 	ldw	r2,-20(fp)
   815c8:	10c00817 	ldw	r3,32(r2)
   815cc:	00bfff84 	movi	r2,-2
   815d0:	1886703a 	and	r3,r3,r2
   815d4:	e0bffb17 	ldw	r2,-20(fp)
   815d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   815dc:	e0bffc17 	ldw	r2,-16(fp)
   815e0:	10800104 	addi	r2,r2,4
   815e4:	1007883a 	mov	r3,r2
   815e8:	e0bffb17 	ldw	r2,-20(fp)
   815ec:	10800817 	ldw	r2,32(r2)
   815f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   815f4:	e0bffc17 	ldw	r2,-16(fp)
   815f8:	10800104 	addi	r2,r2,4
   815fc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   81600:	e0bffd17 	ldw	r2,-12(fp)
   81604:	1080800c 	andi	r2,r2,512
   81608:	103fbe26 	beq	r2,zero,81504 <__alt_data_end+0xfffb3304>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8160c:	e0bffd17 	ldw	r2,-12(fp)
   81610:	1004d43a 	srli	r2,r2,16
   81614:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   81618:	00001406 	br	8166c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8161c:	e0bffc17 	ldw	r2,-16(fp)
   81620:	e0fffb17 	ldw	r3,-20(fp)
   81624:	18c00d17 	ldw	r3,52(r3)
   81628:	e13ffb17 	ldw	r4,-20(fp)
   8162c:	20c7883a 	add	r3,r4,r3
   81630:	18c20e04 	addi	r3,r3,2104
   81634:	18c00003 	ldbu	r3,0(r3)
   81638:	18c03fcc 	andi	r3,r3,255
   8163c:	18c0201c 	xori	r3,r3,128
   81640:	18ffe004 	addi	r3,r3,-128
   81644:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81648:	e0bffb17 	ldw	r2,-20(fp)
   8164c:	10800d17 	ldw	r2,52(r2)
   81650:	10800044 	addi	r2,r2,1
   81654:	10c1ffcc 	andi	r3,r2,2047
   81658:	e0bffb17 	ldw	r2,-20(fp)
   8165c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   81660:	e0bffa17 	ldw	r2,-24(fp)
   81664:	10bfffc4 	addi	r2,r2,-1
   81668:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8166c:	e0bffa17 	ldw	r2,-24(fp)
   81670:	10000526 	beq	r2,zero,81688 <altera_avalon_jtag_uart_irq+0x1a8>
   81674:	e0bffb17 	ldw	r2,-20(fp)
   81678:	10c00d17 	ldw	r3,52(r2)
   8167c:	e0bffb17 	ldw	r2,-20(fp)
   81680:	10800c17 	ldw	r2,48(r2)
   81684:	18bfe51e 	bne	r3,r2,8161c <__alt_data_end+0xfffb341c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   81688:	e0bffa17 	ldw	r2,-24(fp)
   8168c:	103f9d26 	beq	r2,zero,81504 <__alt_data_end+0xfffb3304>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81690:	e0bffb17 	ldw	r2,-20(fp)
   81694:	10c00817 	ldw	r3,32(r2)
   81698:	00bfff44 	movi	r2,-3
   8169c:	1886703a 	and	r3,r3,r2
   816a0:	e0bffb17 	ldw	r2,-20(fp)
   816a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   816a8:	e0bffb17 	ldw	r2,-20(fp)
   816ac:	10800017 	ldw	r2,0(r2)
   816b0:	10800104 	addi	r2,r2,4
   816b4:	1007883a 	mov	r3,r2
   816b8:	e0bffb17 	ldw	r2,-20(fp)
   816bc:	10800817 	ldw	r2,32(r2)
   816c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   816c4:	e0bffc17 	ldw	r2,-16(fp)
   816c8:	10800104 	addi	r2,r2,4
   816cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   816d0:	003f8c06 	br	81504 <__alt_data_end+0xfffb3304>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   816d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   816d8:	0001883a 	nop
   816dc:	e037883a 	mov	sp,fp
   816e0:	df000017 	ldw	fp,0(sp)
   816e4:	dec00104 	addi	sp,sp,4
   816e8:	f800283a 	ret

000816ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   816ec:	defff804 	addi	sp,sp,-32
   816f0:	df000715 	stw	fp,28(sp)
   816f4:	df000704 	addi	fp,sp,28
   816f8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   816fc:	e0bffb17 	ldw	r2,-20(fp)
   81700:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   81704:	e0bff917 	ldw	r2,-28(fp)
   81708:	10800017 	ldw	r2,0(r2)
   8170c:	10800104 	addi	r2,r2,4
   81710:	10800037 	ldwio	r2,0(r2)
   81714:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   81718:	e0bffa17 	ldw	r2,-24(fp)
   8171c:	1081000c 	andi	r2,r2,1024
   81720:	10000b26 	beq	r2,zero,81750 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   81724:	e0bff917 	ldw	r2,-28(fp)
   81728:	10800017 	ldw	r2,0(r2)
   8172c:	10800104 	addi	r2,r2,4
   81730:	1007883a 	mov	r3,r2
   81734:	e0bff917 	ldw	r2,-28(fp)
   81738:	10800817 	ldw	r2,32(r2)
   8173c:	10810014 	ori	r2,r2,1024
   81740:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   81744:	e0bff917 	ldw	r2,-28(fp)
   81748:	10000915 	stw	zero,36(r2)
   8174c:	00000a06 	br	81778 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   81750:	e0bff917 	ldw	r2,-28(fp)
   81754:	10c00917 	ldw	r3,36(r2)
   81758:	00a00034 	movhi	r2,32768
   8175c:	10bfff04 	addi	r2,r2,-4
   81760:	10c00536 	bltu	r2,r3,81778 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   81764:	e0bff917 	ldw	r2,-28(fp)
   81768:	10800917 	ldw	r2,36(r2)
   8176c:	10c00044 	addi	r3,r2,1
   81770:	e0bff917 	ldw	r2,-28(fp)
   81774:	10c00915 	stw	r3,36(r2)
   81778:	00800234 	movhi	r2,8
   8177c:	10960204 	addi	r2,r2,22536
   81780:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   81784:	e037883a 	mov	sp,fp
   81788:	df000017 	ldw	fp,0(sp)
   8178c:	dec00104 	addi	sp,sp,4
   81790:	f800283a 	ret

00081794 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   81794:	defffd04 	addi	sp,sp,-12
   81798:	df000215 	stw	fp,8(sp)
   8179c:	df000204 	addi	fp,sp,8
   817a0:	e13ffe15 	stw	r4,-8(fp)
   817a4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   817a8:	00000506 	br	817c0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   817ac:	e0bfff17 	ldw	r2,-4(fp)
   817b0:	1090000c 	andi	r2,r2,16384
   817b4:	10000226 	beq	r2,zero,817c0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   817b8:	00bffd44 	movi	r2,-11
   817bc:	00000b06 	br	817ec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   817c0:	e0bffe17 	ldw	r2,-8(fp)
   817c4:	10c00d17 	ldw	r3,52(r2)
   817c8:	e0bffe17 	ldw	r2,-8(fp)
   817cc:	10800c17 	ldw	r2,48(r2)
   817d0:	18800526 	beq	r3,r2,817e8 <altera_avalon_jtag_uart_close+0x54>
   817d4:	e0bffe17 	ldw	r2,-8(fp)
   817d8:	10c00917 	ldw	r3,36(r2)
   817dc:	e0bffe17 	ldw	r2,-8(fp)
   817e0:	10800117 	ldw	r2,4(r2)
   817e4:	18bff136 	bltu	r3,r2,817ac <__alt_data_end+0xfffb35ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   817e8:	0005883a 	mov	r2,zero
}
   817ec:	e037883a 	mov	sp,fp
   817f0:	df000017 	ldw	fp,0(sp)
   817f4:	dec00104 	addi	sp,sp,4
   817f8:	f800283a 	ret

000817fc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   817fc:	defffa04 	addi	sp,sp,-24
   81800:	df000515 	stw	fp,20(sp)
   81804:	df000504 	addi	fp,sp,20
   81808:	e13ffd15 	stw	r4,-12(fp)
   8180c:	e17ffe15 	stw	r5,-8(fp)
   81810:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   81814:	00bff9c4 	movi	r2,-25
   81818:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8181c:	e0bffe17 	ldw	r2,-8(fp)
   81820:	10da8060 	cmpeqi	r3,r2,27137
   81824:	1800031e 	bne	r3,zero,81834 <altera_avalon_jtag_uart_ioctl+0x38>
   81828:	109a80a0 	cmpeqi	r2,r2,27138
   8182c:	1000181e 	bne	r2,zero,81890 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   81830:	00002906 	br	818d8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   81834:	e0bffd17 	ldw	r2,-12(fp)
   81838:	10c00117 	ldw	r3,4(r2)
   8183c:	00a00034 	movhi	r2,32768
   81840:	10bfffc4 	addi	r2,r2,-1
   81844:	18802126 	beq	r3,r2,818cc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   81848:	e0bfff17 	ldw	r2,-4(fp)
   8184c:	10800017 	ldw	r2,0(r2)
   81850:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   81854:	e0bffc17 	ldw	r2,-16(fp)
   81858:	10800090 	cmplti	r2,r2,2
   8185c:	1000061e 	bne	r2,zero,81878 <altera_avalon_jtag_uart_ioctl+0x7c>
   81860:	e0fffc17 	ldw	r3,-16(fp)
   81864:	00a00034 	movhi	r2,32768
   81868:	10bfffc4 	addi	r2,r2,-1
   8186c:	18800226 	beq	r3,r2,81878 <altera_avalon_jtag_uart_ioctl+0x7c>
   81870:	e0bffc17 	ldw	r2,-16(fp)
   81874:	00000206 	br	81880 <altera_avalon_jtag_uart_ioctl+0x84>
   81878:	00a00034 	movhi	r2,32768
   8187c:	10bfff84 	addi	r2,r2,-2
   81880:	e0fffd17 	ldw	r3,-12(fp)
   81884:	18800115 	stw	r2,4(r3)
      rc = 0;
   81888:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8188c:	00000f06 	br	818cc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   81890:	e0bffd17 	ldw	r2,-12(fp)
   81894:	10c00117 	ldw	r3,4(r2)
   81898:	00a00034 	movhi	r2,32768
   8189c:	10bfffc4 	addi	r2,r2,-1
   818a0:	18800c26 	beq	r3,r2,818d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   818a4:	e0bffd17 	ldw	r2,-12(fp)
   818a8:	10c00917 	ldw	r3,36(r2)
   818ac:	e0bffd17 	ldw	r2,-12(fp)
   818b0:	10800117 	ldw	r2,4(r2)
   818b4:	1885803a 	cmpltu	r2,r3,r2
   818b8:	10c03fcc 	andi	r3,r2,255
   818bc:	e0bfff17 	ldw	r2,-4(fp)
   818c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   818c4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   818c8:	00000206 	br	818d4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   818cc:	0001883a 	nop
   818d0:	00000106 	br	818d8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   818d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   818d8:	e0bffb17 	ldw	r2,-20(fp)
}
   818dc:	e037883a 	mov	sp,fp
   818e0:	df000017 	ldw	fp,0(sp)
   818e4:	dec00104 	addi	sp,sp,4
   818e8:	f800283a 	ret

000818ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   818ec:	defff304 	addi	sp,sp,-52
   818f0:	dfc00c15 	stw	ra,48(sp)
   818f4:	df000b15 	stw	fp,44(sp)
   818f8:	df000b04 	addi	fp,sp,44
   818fc:	e13ffc15 	stw	r4,-16(fp)
   81900:	e17ffd15 	stw	r5,-12(fp)
   81904:	e1bffe15 	stw	r6,-8(fp)
   81908:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8190c:	e0bffd17 	ldw	r2,-12(fp)
   81910:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81914:	00004706 	br	81a34 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81918:	e0bffc17 	ldw	r2,-16(fp)
   8191c:	10800a17 	ldw	r2,40(r2)
   81920:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81924:	e0bffc17 	ldw	r2,-16(fp)
   81928:	10800b17 	ldw	r2,44(r2)
   8192c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   81930:	e0fff717 	ldw	r3,-36(fp)
   81934:	e0bff817 	ldw	r2,-32(fp)
   81938:	18800536 	bltu	r3,r2,81950 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8193c:	e0fff717 	ldw	r3,-36(fp)
   81940:	e0bff817 	ldw	r2,-32(fp)
   81944:	1885c83a 	sub	r2,r3,r2
   81948:	e0bff615 	stw	r2,-40(fp)
   8194c:	00000406 	br	81960 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81950:	00c20004 	movi	r3,2048
   81954:	e0bff817 	ldw	r2,-32(fp)
   81958:	1885c83a 	sub	r2,r3,r2
   8195c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81960:	e0bff617 	ldw	r2,-40(fp)
   81964:	10001e26 	beq	r2,zero,819e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   81968:	e0fffe17 	ldw	r3,-8(fp)
   8196c:	e0bff617 	ldw	r2,-40(fp)
   81970:	1880022e 	bgeu	r3,r2,8197c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   81974:	e0bffe17 	ldw	r2,-8(fp)
   81978:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8197c:	e0bffc17 	ldw	r2,-16(fp)
   81980:	10c00e04 	addi	r3,r2,56
   81984:	e0bff817 	ldw	r2,-32(fp)
   81988:	1885883a 	add	r2,r3,r2
   8198c:	e1bff617 	ldw	r6,-40(fp)
   81990:	100b883a 	mov	r5,r2
   81994:	e13ff517 	ldw	r4,-44(fp)
   81998:	0082f040 	call	82f04 <memcpy>
      ptr   += n;
   8199c:	e0fff517 	ldw	r3,-44(fp)
   819a0:	e0bff617 	ldw	r2,-40(fp)
   819a4:	1885883a 	add	r2,r3,r2
   819a8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   819ac:	e0fffe17 	ldw	r3,-8(fp)
   819b0:	e0bff617 	ldw	r2,-40(fp)
   819b4:	1885c83a 	sub	r2,r3,r2
   819b8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   819bc:	e0fff817 	ldw	r3,-32(fp)
   819c0:	e0bff617 	ldw	r2,-40(fp)
   819c4:	1885883a 	add	r2,r3,r2
   819c8:	10c1ffcc 	andi	r3,r2,2047
   819cc:	e0bffc17 	ldw	r2,-16(fp)
   819d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   819d4:	e0bffe17 	ldw	r2,-8(fp)
   819d8:	00bfcf16 	blt	zero,r2,81918 <__alt_data_end+0xfffb3718>
   819dc:	00000106 	br	819e4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   819e0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   819e4:	e0fff517 	ldw	r3,-44(fp)
   819e8:	e0bffd17 	ldw	r2,-12(fp)
   819ec:	1880141e 	bne	r3,r2,81a40 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   819f0:	e0bfff17 	ldw	r2,-4(fp)
   819f4:	1090000c 	andi	r2,r2,16384
   819f8:	1000131e 	bne	r2,zero,81a48 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   819fc:	0001883a 	nop
   81a00:	e0bffc17 	ldw	r2,-16(fp)
   81a04:	10c00a17 	ldw	r3,40(r2)
   81a08:	e0bff717 	ldw	r2,-36(fp)
   81a0c:	1880051e 	bne	r3,r2,81a24 <altera_avalon_jtag_uart_read+0x138>
   81a10:	e0bffc17 	ldw	r2,-16(fp)
   81a14:	10c00917 	ldw	r3,36(r2)
   81a18:	e0bffc17 	ldw	r2,-16(fp)
   81a1c:	10800117 	ldw	r2,4(r2)
   81a20:	18bff736 	bltu	r3,r2,81a00 <__alt_data_end+0xfffb3800>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81a24:	e0bffc17 	ldw	r2,-16(fp)
   81a28:	10c00a17 	ldw	r3,40(r2)
   81a2c:	e0bff717 	ldw	r2,-36(fp)
   81a30:	18800726 	beq	r3,r2,81a50 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81a34:	e0bffe17 	ldw	r2,-8(fp)
   81a38:	00bfb716 	blt	zero,r2,81918 <__alt_data_end+0xfffb3718>
   81a3c:	00000506 	br	81a54 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   81a40:	0001883a 	nop
   81a44:	00000306 	br	81a54 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   81a48:	0001883a 	nop
   81a4c:	00000106 	br	81a54 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   81a50:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   81a54:	e0fff517 	ldw	r3,-44(fp)
   81a58:	e0bffd17 	ldw	r2,-12(fp)
   81a5c:	18801826 	beq	r3,r2,81ac0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81a60:	0005303a 	rdctl	r2,status
   81a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81a68:	e0fffb17 	ldw	r3,-20(fp)
   81a6c:	00bfff84 	movi	r2,-2
   81a70:	1884703a 	and	r2,r3,r2
   81a74:	1001703a 	wrctl	status,r2
  
  return context;
   81a78:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   81a7c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81a80:	e0bffc17 	ldw	r2,-16(fp)
   81a84:	10800817 	ldw	r2,32(r2)
   81a88:	10c00054 	ori	r3,r2,1
   81a8c:	e0bffc17 	ldw	r2,-16(fp)
   81a90:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81a94:	e0bffc17 	ldw	r2,-16(fp)
   81a98:	10800017 	ldw	r2,0(r2)
   81a9c:	10800104 	addi	r2,r2,4
   81aa0:	1007883a 	mov	r3,r2
   81aa4:	e0bffc17 	ldw	r2,-16(fp)
   81aa8:	10800817 	ldw	r2,32(r2)
   81aac:	18800035 	stwio	r2,0(r3)
   81ab0:	e0bffa17 	ldw	r2,-24(fp)
   81ab4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81ab8:	e0bff917 	ldw	r2,-28(fp)
   81abc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   81ac0:	e0fff517 	ldw	r3,-44(fp)
   81ac4:	e0bffd17 	ldw	r2,-12(fp)
   81ac8:	18800426 	beq	r3,r2,81adc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   81acc:	e0fff517 	ldw	r3,-44(fp)
   81ad0:	e0bffd17 	ldw	r2,-12(fp)
   81ad4:	1885c83a 	sub	r2,r3,r2
   81ad8:	00000606 	br	81af4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   81adc:	e0bfff17 	ldw	r2,-4(fp)
   81ae0:	1090000c 	andi	r2,r2,16384
   81ae4:	10000226 	beq	r2,zero,81af0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   81ae8:	00bffd44 	movi	r2,-11
   81aec:	00000106 	br	81af4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   81af0:	00bffec4 	movi	r2,-5
}
   81af4:	e037883a 	mov	sp,fp
   81af8:	dfc00117 	ldw	ra,4(sp)
   81afc:	df000017 	ldw	fp,0(sp)
   81b00:	dec00204 	addi	sp,sp,8
   81b04:	f800283a 	ret

00081b08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   81b08:	defff304 	addi	sp,sp,-52
   81b0c:	dfc00c15 	stw	ra,48(sp)
   81b10:	df000b15 	stw	fp,44(sp)
   81b14:	df000b04 	addi	fp,sp,44
   81b18:	e13ffc15 	stw	r4,-16(fp)
   81b1c:	e17ffd15 	stw	r5,-12(fp)
   81b20:	e1bffe15 	stw	r6,-8(fp)
   81b24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81b28:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   81b2c:	e0bffd17 	ldw	r2,-12(fp)
   81b30:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81b34:	00003706 	br	81c14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81b38:	e0bffc17 	ldw	r2,-16(fp)
   81b3c:	10800c17 	ldw	r2,48(r2)
   81b40:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   81b44:	e0bffc17 	ldw	r2,-16(fp)
   81b48:	10800d17 	ldw	r2,52(r2)
   81b4c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   81b50:	e0fff917 	ldw	r3,-28(fp)
   81b54:	e0bff517 	ldw	r2,-44(fp)
   81b58:	1880062e 	bgeu	r3,r2,81b74 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   81b5c:	e0fff517 	ldw	r3,-44(fp)
   81b60:	e0bff917 	ldw	r2,-28(fp)
   81b64:	1885c83a 	sub	r2,r3,r2
   81b68:	10bfffc4 	addi	r2,r2,-1
   81b6c:	e0bff615 	stw	r2,-40(fp)
   81b70:	00000b06 	br	81ba0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   81b74:	e0bff517 	ldw	r2,-44(fp)
   81b78:	10000526 	beq	r2,zero,81b90 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   81b7c:	00c20004 	movi	r3,2048
   81b80:	e0bff917 	ldw	r2,-28(fp)
   81b84:	1885c83a 	sub	r2,r3,r2
   81b88:	e0bff615 	stw	r2,-40(fp)
   81b8c:	00000406 	br	81ba0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   81b90:	00c1ffc4 	movi	r3,2047
   81b94:	e0bff917 	ldw	r2,-28(fp)
   81b98:	1885c83a 	sub	r2,r3,r2
   81b9c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81ba0:	e0bff617 	ldw	r2,-40(fp)
   81ba4:	10001e26 	beq	r2,zero,81c20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   81ba8:	e0fffe17 	ldw	r3,-8(fp)
   81bac:	e0bff617 	ldw	r2,-40(fp)
   81bb0:	1880022e 	bgeu	r3,r2,81bbc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   81bb4:	e0bffe17 	ldw	r2,-8(fp)
   81bb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   81bbc:	e0bffc17 	ldw	r2,-16(fp)
   81bc0:	10c20e04 	addi	r3,r2,2104
   81bc4:	e0bff917 	ldw	r2,-28(fp)
   81bc8:	1885883a 	add	r2,r3,r2
   81bcc:	e1bff617 	ldw	r6,-40(fp)
   81bd0:	e17ffd17 	ldw	r5,-12(fp)
   81bd4:	1009883a 	mov	r4,r2
   81bd8:	0082f040 	call	82f04 <memcpy>
      ptr   += n;
   81bdc:	e0fffd17 	ldw	r3,-12(fp)
   81be0:	e0bff617 	ldw	r2,-40(fp)
   81be4:	1885883a 	add	r2,r3,r2
   81be8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   81bec:	e0fffe17 	ldw	r3,-8(fp)
   81bf0:	e0bff617 	ldw	r2,-40(fp)
   81bf4:	1885c83a 	sub	r2,r3,r2
   81bf8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81bfc:	e0fff917 	ldw	r3,-28(fp)
   81c00:	e0bff617 	ldw	r2,-40(fp)
   81c04:	1885883a 	add	r2,r3,r2
   81c08:	10c1ffcc 	andi	r3,r2,2047
   81c0c:	e0bffc17 	ldw	r2,-16(fp)
   81c10:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81c14:	e0bffe17 	ldw	r2,-8(fp)
   81c18:	00bfc716 	blt	zero,r2,81b38 <__alt_data_end+0xfffb3938>
   81c1c:	00000106 	br	81c24 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   81c20:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81c24:	0005303a 	rdctl	r2,status
   81c28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81c2c:	e0fffb17 	ldw	r3,-20(fp)
   81c30:	00bfff84 	movi	r2,-2
   81c34:	1884703a 	and	r2,r3,r2
   81c38:	1001703a 	wrctl	status,r2
  
  return context;
   81c3c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   81c40:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81c44:	e0bffc17 	ldw	r2,-16(fp)
   81c48:	10800817 	ldw	r2,32(r2)
   81c4c:	10c00094 	ori	r3,r2,2
   81c50:	e0bffc17 	ldw	r2,-16(fp)
   81c54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81c58:	e0bffc17 	ldw	r2,-16(fp)
   81c5c:	10800017 	ldw	r2,0(r2)
   81c60:	10800104 	addi	r2,r2,4
   81c64:	1007883a 	mov	r3,r2
   81c68:	e0bffc17 	ldw	r2,-16(fp)
   81c6c:	10800817 	ldw	r2,32(r2)
   81c70:	18800035 	stwio	r2,0(r3)
   81c74:	e0bffa17 	ldw	r2,-24(fp)
   81c78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81c7c:	e0bff817 	ldw	r2,-32(fp)
   81c80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   81c84:	e0bffe17 	ldw	r2,-8(fp)
   81c88:	0080100e 	bge	zero,r2,81ccc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   81c8c:	e0bfff17 	ldw	r2,-4(fp)
   81c90:	1090000c 	andi	r2,r2,16384
   81c94:	1000101e 	bne	r2,zero,81cd8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   81c98:	0001883a 	nop
   81c9c:	e0bffc17 	ldw	r2,-16(fp)
   81ca0:	10c00d17 	ldw	r3,52(r2)
   81ca4:	e0bff517 	ldw	r2,-44(fp)
   81ca8:	1880051e 	bne	r3,r2,81cc0 <altera_avalon_jtag_uart_write+0x1b8>
   81cac:	e0bffc17 	ldw	r2,-16(fp)
   81cb0:	10c00917 	ldw	r3,36(r2)
   81cb4:	e0bffc17 	ldw	r2,-16(fp)
   81cb8:	10800117 	ldw	r2,4(r2)
   81cbc:	18bff736 	bltu	r3,r2,81c9c <__alt_data_end+0xfffb3a9c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   81cc0:	e0bffc17 	ldw	r2,-16(fp)
   81cc4:	10800917 	ldw	r2,36(r2)
   81cc8:	1000051e 	bne	r2,zero,81ce0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   81ccc:	e0bffe17 	ldw	r2,-8(fp)
   81cd0:	00bfd016 	blt	zero,r2,81c14 <__alt_data_end+0xfffb3a14>
   81cd4:	00000306 	br	81ce4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   81cd8:	0001883a 	nop
   81cdc:	00000106 	br	81ce4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   81ce0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81ce4:	e0fffd17 	ldw	r3,-12(fp)
   81ce8:	e0bff717 	ldw	r2,-36(fp)
   81cec:	18800426 	beq	r3,r2,81d00 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   81cf0:	e0fffd17 	ldw	r3,-12(fp)
   81cf4:	e0bff717 	ldw	r2,-36(fp)
   81cf8:	1885c83a 	sub	r2,r3,r2
   81cfc:	00000606 	br	81d18 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   81d00:	e0bfff17 	ldw	r2,-4(fp)
   81d04:	1090000c 	andi	r2,r2,16384
   81d08:	10000226 	beq	r2,zero,81d14 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   81d0c:	00bffd44 	movi	r2,-11
   81d10:	00000106 	br	81d18 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   81d14:	00bffec4 	movi	r2,-5
}
   81d18:	e037883a 	mov	sp,fp
   81d1c:	dfc00117 	ldw	ra,4(sp)
   81d20:	df000017 	ldw	fp,0(sp)
   81d24:	dec00204 	addi	sp,sp,8
   81d28:	f800283a 	ret

00081d2c <alt_up_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_ADC_CH_7(((adc)->base))

alt_up_adc_dev* alt_up_adc_open_dev (const char* name){
   81d2c:	defffc04 	addi	sp,sp,-16
   81d30:	dfc00315 	stw	ra,12(sp)
   81d34:	df000215 	stw	fp,8(sp)
   81d38:	df000204 	addi	fp,sp,8
   81d3c:	e13fff15 	stw	r4,-4(fp)

	alt_up_adc_dev* dev = (alt_up_adc_dev*) alt_find_dev(name, &alt_dev_list);
   81d40:	01400234 	movhi	r5,8
   81d44:	29512604 	addi	r5,r5,17560
   81d48:	e13fff17 	ldw	r4,-4(fp)
   81d4c:	008224c0 	call	8224c <alt_find_dev>
   81d50:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
   81d54:	e0bffe17 	ldw	r2,-8(fp)
}
   81d58:	e037883a 	mov	sp,fp
   81d5c:	dfc00117 	ldw	ra,4(sp)
   81d60:	df000017 	ldw	fp,0(sp)
   81d64:	dec00204 	addi	sp,sp,8
   81d68:	f800283a 	ret

00081d6c <alt_up_adc_read>:

unsigned int alt_up_adc_read (alt_up_adc_dev * adc, unsigned channel){
   81d6c:	defffc04 	addi	sp,sp,-16
   81d70:	df000315 	stw	fp,12(sp)
   81d74:	df000304 	addi	fp,sp,12
   81d78:	e13ffe15 	stw	r4,-8(fp)
   81d7c:	e17fff15 	stw	r5,-4(fp)

	unsigned int ch = channel % 8;
   81d80:	e0bfff17 	ldw	r2,-4(fp)
   81d84:	108001cc 	andi	r2,r2,7
   81d88:	e0bffd15 	stw	r2,-12(fp)
	
	switch (ch){
   81d8c:	e0bffd17 	ldw	r2,-12(fp)
   81d90:	10800228 	cmpgeui	r2,r2,8
   81d94:	1000361e 	bne	r2,zero,81e70 <alt_up_adc_read+0x104>
   81d98:	e0bffd17 	ldw	r2,-12(fp)
   81d9c:	100690ba 	slli	r3,r2,2
   81da0:	00800234 	movhi	r2,8
   81da4:	10876d04 	addi	r2,r2,7604
   81da8:	1885883a 	add	r2,r3,r2
   81dac:	10800017 	ldw	r2,0(r2)
   81db0:	1000683a 	jmp	r2
   81db4:	00081dd4 	movui	zero,8311
   81db8:	00081de4 	muli	zero,zero,8311
   81dbc:	00081df8 	rdprs	zero,zero,8311
   81dc0:	00081e0c 	andi	zero,zero,8312
   81dc4:	00081e20 	cmpeqi	zero,zero,8312
   81dc8:	00081e34 	movhi	zero,8312
   81dcc:	00081e48 	cmpgei	zero,zero,8313
   81dd0:	00081e5c 	xori	zero,zero,8313
		case 0:
			return read_ch0(adc);
   81dd4:	e0bffe17 	ldw	r2,-8(fp)
   81dd8:	10800a17 	ldw	r2,40(r2)
   81ddc:	10800037 	ldwio	r2,0(r2)
   81de0:	00002406 	br	81e74 <alt_up_adc_read+0x108>
		case 1:
			return read_ch1(adc);
   81de4:	e0bffe17 	ldw	r2,-8(fp)
   81de8:	10800a17 	ldw	r2,40(r2)
   81dec:	10800104 	addi	r2,r2,4
   81df0:	10800037 	ldwio	r2,0(r2)
   81df4:	00001f06 	br	81e74 <alt_up_adc_read+0x108>
		case 2:
			return read_ch2(adc);
   81df8:	e0bffe17 	ldw	r2,-8(fp)
   81dfc:	10800a17 	ldw	r2,40(r2)
   81e00:	10800204 	addi	r2,r2,8
   81e04:	10800037 	ldwio	r2,0(r2)
   81e08:	00001a06 	br	81e74 <alt_up_adc_read+0x108>
		case 3:
			return read_ch3(adc);
   81e0c:	e0bffe17 	ldw	r2,-8(fp)
   81e10:	10800a17 	ldw	r2,40(r2)
   81e14:	10800304 	addi	r2,r2,12
   81e18:	10800037 	ldwio	r2,0(r2)
   81e1c:	00001506 	br	81e74 <alt_up_adc_read+0x108>
		case 4:
			return read_ch4(adc);
   81e20:	e0bffe17 	ldw	r2,-8(fp)
   81e24:	10800a17 	ldw	r2,40(r2)
   81e28:	10800404 	addi	r2,r2,16
   81e2c:	10800037 	ldwio	r2,0(r2)
   81e30:	00001006 	br	81e74 <alt_up_adc_read+0x108>
		case 5:
			return read_ch5(adc);
   81e34:	e0bffe17 	ldw	r2,-8(fp)
   81e38:	10800a17 	ldw	r2,40(r2)
   81e3c:	10800504 	addi	r2,r2,20
   81e40:	10800037 	ldwio	r2,0(r2)
   81e44:	00000b06 	br	81e74 <alt_up_adc_read+0x108>
		case 6:
			return read_ch6(adc);
   81e48:	e0bffe17 	ldw	r2,-8(fp)
   81e4c:	10800a17 	ldw	r2,40(r2)
   81e50:	10800604 	addi	r2,r2,24
   81e54:	10800037 	ldwio	r2,0(r2)
   81e58:	00000606 	br	81e74 <alt_up_adc_read+0x108>
		case 7:
			return read_ch7(adc);
   81e5c:	e0bffe17 	ldw	r2,-8(fp)
   81e60:	10800a17 	ldw	r2,40(r2)
   81e64:	10800704 	addi	r2,r2,28
   81e68:	10800037 	ldwio	r2,0(r2)
   81e6c:	00000106 	br	81e74 <alt_up_adc_read+0x108>
		default:
			return 0;
   81e70:	0005883a 	mov	r2,zero
	}
}
   81e74:	e037883a 	mov	sp,fp
   81e78:	df000017 	ldw	fp,0(sp)
   81e7c:	dec00104 	addi	sp,sp,4
   81e80:	f800283a 	ret

00081e84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   81e84:	defff504 	addi	sp,sp,-44
   81e88:	df000a15 	stw	fp,40(sp)
   81e8c:	df000a04 	addi	fp,sp,40
   81e90:	e13ffc15 	stw	r4,-16(fp)
   81e94:	e17ffd15 	stw	r5,-12(fp)
   81e98:	e1bffe15 	stw	r6,-8(fp)
   81e9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   81ea0:	e03ff615 	stw	zero,-40(fp)
   81ea4:	00800234 	movhi	r2,8
   81ea8:	10960204 	addi	r2,r2,22536
   81eac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   81eb0:	10003f26 	beq	r2,zero,81fb0 <alt_alarm_start+0x12c>
  {
    if (alarm)
   81eb4:	e0bffc17 	ldw	r2,-16(fp)
   81eb8:	10003b26 	beq	r2,zero,81fa8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   81ebc:	e0bffc17 	ldw	r2,-16(fp)
   81ec0:	e0fffe17 	ldw	r3,-8(fp)
   81ec4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   81ec8:	e0bffc17 	ldw	r2,-16(fp)
   81ecc:	e0ffff17 	ldw	r3,-4(fp)
   81ed0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81ed4:	0005303a 	rdctl	r2,status
   81ed8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81edc:	e0fff917 	ldw	r3,-28(fp)
   81ee0:	00bfff84 	movi	r2,-2
   81ee4:	1884703a 	and	r2,r3,r2
   81ee8:	1001703a 	wrctl	status,r2
  
  return context;
   81eec:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   81ef0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81ef4:	00800234 	movhi	r2,8
   81ef8:	10960304 	addi	r2,r2,22540
   81efc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   81f00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   81f04:	e0fffd17 	ldw	r3,-12(fp)
   81f08:	e0bff617 	ldw	r2,-40(fp)
   81f0c:	1885883a 	add	r2,r3,r2
   81f10:	10c00044 	addi	r3,r2,1
   81f14:	e0bffc17 	ldw	r2,-16(fp)
   81f18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   81f1c:	e0bffc17 	ldw	r2,-16(fp)
   81f20:	10c00217 	ldw	r3,8(r2)
   81f24:	e0bff617 	ldw	r2,-40(fp)
   81f28:	1880042e 	bgeu	r3,r2,81f3c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   81f2c:	e0bffc17 	ldw	r2,-16(fp)
   81f30:	00c00044 	movi	r3,1
   81f34:	10c00405 	stb	r3,16(r2)
   81f38:	00000206 	br	81f44 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   81f3c:	e0bffc17 	ldw	r2,-16(fp)
   81f40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   81f44:	e0fffc17 	ldw	r3,-16(fp)
   81f48:	00800234 	movhi	r2,8
   81f4c:	10912a04 	addi	r2,r2,17576
   81f50:	e0bffa15 	stw	r2,-24(fp)
   81f54:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81f58:	e0bffb17 	ldw	r2,-20(fp)
   81f5c:	e0fffa17 	ldw	r3,-24(fp)
   81f60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   81f64:	e0bffa17 	ldw	r2,-24(fp)
   81f68:	10c00017 	ldw	r3,0(r2)
   81f6c:	e0bffb17 	ldw	r2,-20(fp)
   81f70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   81f74:	e0bffa17 	ldw	r2,-24(fp)
   81f78:	10800017 	ldw	r2,0(r2)
   81f7c:	e0fffb17 	ldw	r3,-20(fp)
   81f80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   81f84:	e0bffa17 	ldw	r2,-24(fp)
   81f88:	e0fffb17 	ldw	r3,-20(fp)
   81f8c:	10c00015 	stw	r3,0(r2)
   81f90:	e0bff817 	ldw	r2,-32(fp)
   81f94:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81f98:	e0bff717 	ldw	r2,-36(fp)
   81f9c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   81fa0:	0005883a 	mov	r2,zero
   81fa4:	00000306 	br	81fb4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   81fa8:	00bffa84 	movi	r2,-22
   81fac:	00000106 	br	81fb4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   81fb0:	00bfde84 	movi	r2,-134
  }
}
   81fb4:	e037883a 	mov	sp,fp
   81fb8:	df000017 	ldw	fp,0(sp)
   81fbc:	dec00104 	addi	sp,sp,4
   81fc0:	f800283a 	ret

00081fc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81fc4:	defffe04 	addi	sp,sp,-8
   81fc8:	dfc00115 	stw	ra,4(sp)
   81fcc:	df000015 	stw	fp,0(sp)
   81fd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81fd4:	00800234 	movhi	r2,8
   81fd8:	10912904 	addi	r2,r2,17572
   81fdc:	10800017 	ldw	r2,0(r2)
   81fe0:	10000526 	beq	r2,zero,81ff8 <alt_get_errno+0x34>
   81fe4:	00800234 	movhi	r2,8
   81fe8:	10912904 	addi	r2,r2,17572
   81fec:	10800017 	ldw	r2,0(r2)
   81ff0:	103ee83a 	callr	r2
   81ff4:	00000206 	br	82000 <alt_get_errno+0x3c>
   81ff8:	00800234 	movhi	r2,8
   81ffc:	1095fc04 	addi	r2,r2,22512
}
   82000:	e037883a 	mov	sp,fp
   82004:	dfc00117 	ldw	ra,4(sp)
   82008:	df000017 	ldw	fp,0(sp)
   8200c:	dec00204 	addi	sp,sp,8
   82010:	f800283a 	ret

00082014 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82014:	defffb04 	addi	sp,sp,-20
   82018:	dfc00415 	stw	ra,16(sp)
   8201c:	df000315 	stw	fp,12(sp)
   82020:	df000304 	addi	fp,sp,12
   82024:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82028:	e0bfff17 	ldw	r2,-4(fp)
   8202c:	10000616 	blt	r2,zero,82048 <close+0x34>
   82030:	e0bfff17 	ldw	r2,-4(fp)
   82034:	10c00324 	muli	r3,r2,12
   82038:	00800234 	movhi	r2,8
   8203c:	1090c104 	addi	r2,r2,17156
   82040:	1885883a 	add	r2,r3,r2
   82044:	00000106 	br	8204c <close+0x38>
   82048:	0005883a 	mov	r2,zero
   8204c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   82050:	e0bffd17 	ldw	r2,-12(fp)
   82054:	10001926 	beq	r2,zero,820bc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82058:	e0bffd17 	ldw	r2,-12(fp)
   8205c:	10800017 	ldw	r2,0(r2)
   82060:	10800417 	ldw	r2,16(r2)
   82064:	10000626 	beq	r2,zero,82080 <close+0x6c>
   82068:	e0bffd17 	ldw	r2,-12(fp)
   8206c:	10800017 	ldw	r2,0(r2)
   82070:	10800417 	ldw	r2,16(r2)
   82074:	e13ffd17 	ldw	r4,-12(fp)
   82078:	103ee83a 	callr	r2
   8207c:	00000106 	br	82084 <close+0x70>
   82080:	0005883a 	mov	r2,zero
   82084:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82088:	e13fff17 	ldw	r4,-4(fp)
   8208c:	0082a300 	call	82a30 <alt_release_fd>
    if (rval < 0)
   82090:	e0bffe17 	ldw	r2,-8(fp)
   82094:	1000070e 	bge	r2,zero,820b4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   82098:	0081fc40 	call	81fc4 <alt_get_errno>
   8209c:	1007883a 	mov	r3,r2
   820a0:	e0bffe17 	ldw	r2,-8(fp)
   820a4:	0085c83a 	sub	r2,zero,r2
   820a8:	18800015 	stw	r2,0(r3)
      return -1;
   820ac:	00bfffc4 	movi	r2,-1
   820b0:	00000706 	br	820d0 <close+0xbc>
    }
    return 0;
   820b4:	0005883a 	mov	r2,zero
   820b8:	00000506 	br	820d0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   820bc:	0081fc40 	call	81fc4 <alt_get_errno>
   820c0:	1007883a 	mov	r3,r2
   820c4:	00801444 	movi	r2,81
   820c8:	18800015 	stw	r2,0(r3)
    return -1;
   820cc:	00bfffc4 	movi	r2,-1
  }
}
   820d0:	e037883a 	mov	sp,fp
   820d4:	dfc00117 	ldw	ra,4(sp)
   820d8:	df000017 	ldw	fp,0(sp)
   820dc:	dec00204 	addi	sp,sp,8
   820e0:	f800283a 	ret

000820e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   820e4:	defffe04 	addi	sp,sp,-8
   820e8:	df000115 	stw	fp,4(sp)
   820ec:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   820f0:	e03fff15 	stw	zero,-4(fp)
   820f4:	00000506 	br	8210c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   820f8:	e0bfff17 	ldw	r2,-4(fp)
   820fc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82100:	e0bfff17 	ldw	r2,-4(fp)
   82104:	10800804 	addi	r2,r2,32
   82108:	e0bfff15 	stw	r2,-4(fp)
   8210c:	e0bfff17 	ldw	r2,-4(fp)
   82110:	10820030 	cmpltui	r2,r2,2048
   82114:	103ff81e 	bne	r2,zero,820f8 <__alt_data_end+0xfffb3ef8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82118:	0001883a 	nop
   8211c:	e037883a 	mov	sp,fp
   82120:	df000017 	ldw	fp,0(sp)
   82124:	dec00104 	addi	sp,sp,4
   82128:	f800283a 	ret

0008212c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8212c:	defffc04 	addi	sp,sp,-16
   82130:	df000315 	stw	fp,12(sp)
   82134:	df000304 	addi	fp,sp,12
   82138:	e13ffd15 	stw	r4,-12(fp)
   8213c:	e17ffe15 	stw	r5,-8(fp)
   82140:	e1bfff15 	stw	r6,-4(fp)
  return len;
   82144:	e0bfff17 	ldw	r2,-4(fp)
}
   82148:	e037883a 	mov	sp,fp
   8214c:	df000017 	ldw	fp,0(sp)
   82150:	dec00104 	addi	sp,sp,4
   82154:	f800283a 	ret

00082158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82158:	defffe04 	addi	sp,sp,-8
   8215c:	dfc00115 	stw	ra,4(sp)
   82160:	df000015 	stw	fp,0(sp)
   82164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82168:	00800234 	movhi	r2,8
   8216c:	10912904 	addi	r2,r2,17572
   82170:	10800017 	ldw	r2,0(r2)
   82174:	10000526 	beq	r2,zero,8218c <alt_get_errno+0x34>
   82178:	00800234 	movhi	r2,8
   8217c:	10912904 	addi	r2,r2,17572
   82180:	10800017 	ldw	r2,0(r2)
   82184:	103ee83a 	callr	r2
   82188:	00000206 	br	82194 <alt_get_errno+0x3c>
   8218c:	00800234 	movhi	r2,8
   82190:	1095fc04 	addi	r2,r2,22512
}
   82194:	e037883a 	mov	sp,fp
   82198:	dfc00117 	ldw	ra,4(sp)
   8219c:	df000017 	ldw	fp,0(sp)
   821a0:	dec00204 	addi	sp,sp,8
   821a4:	f800283a 	ret

000821a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   821a8:	defffa04 	addi	sp,sp,-24
   821ac:	dfc00515 	stw	ra,20(sp)
   821b0:	df000415 	stw	fp,16(sp)
   821b4:	df000404 	addi	fp,sp,16
   821b8:	e13ffe15 	stw	r4,-8(fp)
   821bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   821c0:	e0bffe17 	ldw	r2,-8(fp)
   821c4:	10000326 	beq	r2,zero,821d4 <alt_dev_llist_insert+0x2c>
   821c8:	e0bffe17 	ldw	r2,-8(fp)
   821cc:	10800217 	ldw	r2,8(r2)
   821d0:	1000061e 	bne	r2,zero,821ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   821d4:	00821580 	call	82158 <alt_get_errno>
   821d8:	1007883a 	mov	r3,r2
   821dc:	00800584 	movi	r2,22
   821e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   821e4:	00bffa84 	movi	r2,-22
   821e8:	00001306 	br	82238 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   821ec:	e0bffe17 	ldw	r2,-8(fp)
   821f0:	e0ffff17 	ldw	r3,-4(fp)
   821f4:	e0fffc15 	stw	r3,-16(fp)
   821f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   821fc:	e0bffd17 	ldw	r2,-12(fp)
   82200:	e0fffc17 	ldw	r3,-16(fp)
   82204:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82208:	e0bffc17 	ldw	r2,-16(fp)
   8220c:	10c00017 	ldw	r3,0(r2)
   82210:	e0bffd17 	ldw	r2,-12(fp)
   82214:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82218:	e0bffc17 	ldw	r2,-16(fp)
   8221c:	10800017 	ldw	r2,0(r2)
   82220:	e0fffd17 	ldw	r3,-12(fp)
   82224:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82228:	e0bffc17 	ldw	r2,-16(fp)
   8222c:	e0fffd17 	ldw	r3,-12(fp)
   82230:	10c00015 	stw	r3,0(r2)

  return 0;  
   82234:	0005883a 	mov	r2,zero
}
   82238:	e037883a 	mov	sp,fp
   8223c:	dfc00117 	ldw	ra,4(sp)
   82240:	df000017 	ldw	fp,0(sp)
   82244:	dec00204 	addi	sp,sp,8
   82248:	f800283a 	ret

0008224c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8224c:	defffa04 	addi	sp,sp,-24
   82250:	dfc00515 	stw	ra,20(sp)
   82254:	df000415 	stw	fp,16(sp)
   82258:	df000404 	addi	fp,sp,16
   8225c:	e13ffe15 	stw	r4,-8(fp)
   82260:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82264:	e0bfff17 	ldw	r2,-4(fp)
   82268:	10800017 	ldw	r2,0(r2)
   8226c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82270:	e13ffe17 	ldw	r4,-8(fp)
   82274:	00806c00 	call	806c0 <strlen>
   82278:	10800044 	addi	r2,r2,1
   8227c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   82280:	00000d06 	br	822b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   82284:	e0bffc17 	ldw	r2,-16(fp)
   82288:	10800217 	ldw	r2,8(r2)
   8228c:	e0fffd17 	ldw	r3,-12(fp)
   82290:	180d883a 	mov	r6,r3
   82294:	e17ffe17 	ldw	r5,-8(fp)
   82298:	1009883a 	mov	r4,r2
   8229c:	0082ed40 	call	82ed4 <memcmp>
   822a0:	1000021e 	bne	r2,zero,822ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   822a4:	e0bffc17 	ldw	r2,-16(fp)
   822a8:	00000706 	br	822c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   822ac:	e0bffc17 	ldw	r2,-16(fp)
   822b0:	10800017 	ldw	r2,0(r2)
   822b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   822b8:	e0fffc17 	ldw	r3,-16(fp)
   822bc:	e0bfff17 	ldw	r2,-4(fp)
   822c0:	18bff01e 	bne	r3,r2,82284 <__alt_data_end+0xfffb4084>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   822c4:	0005883a 	mov	r2,zero
}
   822c8:	e037883a 	mov	sp,fp
   822cc:	dfc00117 	ldw	ra,4(sp)
   822d0:	df000017 	ldw	fp,0(sp)
   822d4:	dec00204 	addi	sp,sp,8
   822d8:	f800283a 	ret

000822dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   822dc:	defffe04 	addi	sp,sp,-8
   822e0:	dfc00115 	stw	ra,4(sp)
   822e4:	df000015 	stw	fp,0(sp)
   822e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   822ec:	01440004 	movi	r5,4096
   822f0:	0009883a 	mov	r4,zero
   822f4:	0082e240 	call	82e24 <alt_icache_flush>
#endif
}
   822f8:	0001883a 	nop
   822fc:	e037883a 	mov	sp,fp
   82300:	dfc00117 	ldw	ra,4(sp)
   82304:	df000017 	ldw	fp,0(sp)
   82308:	dec00204 	addi	sp,sp,8
   8230c:	f800283a 	ret

00082310 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82310:	defff904 	addi	sp,sp,-28
   82314:	dfc00615 	stw	ra,24(sp)
   82318:	df000515 	stw	fp,20(sp)
   8231c:	df000504 	addi	fp,sp,20
   82320:	e13ffc15 	stw	r4,-16(fp)
   82324:	e17ffd15 	stw	r5,-12(fp)
   82328:	e1bffe15 	stw	r6,-8(fp)
   8232c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   82330:	e0800217 	ldw	r2,8(fp)
   82334:	d8800015 	stw	r2,0(sp)
   82338:	e1ffff17 	ldw	r7,-4(fp)
   8233c:	e1bffe17 	ldw	r6,-8(fp)
   82340:	e17ffd17 	ldw	r5,-12(fp)
   82344:	e13ffc17 	ldw	r4,-16(fp)
   82348:	00824f00 	call	824f0 <alt_iic_isr_register>
}  
   8234c:	e037883a 	mov	sp,fp
   82350:	dfc00117 	ldw	ra,4(sp)
   82354:	df000017 	ldw	fp,0(sp)
   82358:	dec00204 	addi	sp,sp,8
   8235c:	f800283a 	ret

00082360 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   82360:	defff904 	addi	sp,sp,-28
   82364:	df000615 	stw	fp,24(sp)
   82368:	df000604 	addi	fp,sp,24
   8236c:	e13ffe15 	stw	r4,-8(fp)
   82370:	e17fff15 	stw	r5,-4(fp)
   82374:	e0bfff17 	ldw	r2,-4(fp)
   82378:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8237c:	0005303a 	rdctl	r2,status
   82380:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82384:	e0fffb17 	ldw	r3,-20(fp)
   82388:	00bfff84 	movi	r2,-2
   8238c:	1884703a 	and	r2,r3,r2
   82390:	1001703a 	wrctl	status,r2
  
  return context;
   82394:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82398:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8239c:	00c00044 	movi	r3,1
   823a0:	e0bffa17 	ldw	r2,-24(fp)
   823a4:	1884983a 	sll	r2,r3,r2
   823a8:	1007883a 	mov	r3,r2
   823ac:	00800234 	movhi	r2,8
   823b0:	1095fd04 	addi	r2,r2,22516
   823b4:	10800017 	ldw	r2,0(r2)
   823b8:	1886b03a 	or	r3,r3,r2
   823bc:	00800234 	movhi	r2,8
   823c0:	1095fd04 	addi	r2,r2,22516
   823c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   823c8:	00800234 	movhi	r2,8
   823cc:	1095fd04 	addi	r2,r2,22516
   823d0:	10800017 	ldw	r2,0(r2)
   823d4:	100170fa 	wrctl	ienable,r2
   823d8:	e0bffc17 	ldw	r2,-16(fp)
   823dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   823e0:	e0bffd17 	ldw	r2,-12(fp)
   823e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   823e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   823ec:	0001883a 	nop
}
   823f0:	e037883a 	mov	sp,fp
   823f4:	df000017 	ldw	fp,0(sp)
   823f8:	dec00104 	addi	sp,sp,4
   823fc:	f800283a 	ret

00082400 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   82400:	defff904 	addi	sp,sp,-28
   82404:	df000615 	stw	fp,24(sp)
   82408:	df000604 	addi	fp,sp,24
   8240c:	e13ffe15 	stw	r4,-8(fp)
   82410:	e17fff15 	stw	r5,-4(fp)
   82414:	e0bfff17 	ldw	r2,-4(fp)
   82418:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8241c:	0005303a 	rdctl	r2,status
   82420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82424:	e0fffb17 	ldw	r3,-20(fp)
   82428:	00bfff84 	movi	r2,-2
   8242c:	1884703a 	and	r2,r3,r2
   82430:	1001703a 	wrctl	status,r2
  
  return context;
   82434:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82438:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8243c:	00c00044 	movi	r3,1
   82440:	e0bffa17 	ldw	r2,-24(fp)
   82444:	1884983a 	sll	r2,r3,r2
   82448:	0084303a 	nor	r2,zero,r2
   8244c:	1007883a 	mov	r3,r2
   82450:	00800234 	movhi	r2,8
   82454:	1095fd04 	addi	r2,r2,22516
   82458:	10800017 	ldw	r2,0(r2)
   8245c:	1886703a 	and	r3,r3,r2
   82460:	00800234 	movhi	r2,8
   82464:	1095fd04 	addi	r2,r2,22516
   82468:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8246c:	00800234 	movhi	r2,8
   82470:	1095fd04 	addi	r2,r2,22516
   82474:	10800017 	ldw	r2,0(r2)
   82478:	100170fa 	wrctl	ienable,r2
   8247c:	e0bffc17 	ldw	r2,-16(fp)
   82480:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82484:	e0bffd17 	ldw	r2,-12(fp)
   82488:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8248c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   82490:	0001883a 	nop
}
   82494:	e037883a 	mov	sp,fp
   82498:	df000017 	ldw	fp,0(sp)
   8249c:	dec00104 	addi	sp,sp,4
   824a0:	f800283a 	ret

000824a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   824a4:	defffc04 	addi	sp,sp,-16
   824a8:	df000315 	stw	fp,12(sp)
   824ac:	df000304 	addi	fp,sp,12
   824b0:	e13ffe15 	stw	r4,-8(fp)
   824b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   824b8:	000530fa 	rdctl	r2,ienable
   824bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   824c0:	00c00044 	movi	r3,1
   824c4:	e0bfff17 	ldw	r2,-4(fp)
   824c8:	1884983a 	sll	r2,r3,r2
   824cc:	1007883a 	mov	r3,r2
   824d0:	e0bffd17 	ldw	r2,-12(fp)
   824d4:	1884703a 	and	r2,r3,r2
   824d8:	1004c03a 	cmpne	r2,r2,zero
   824dc:	10803fcc 	andi	r2,r2,255
}
   824e0:	e037883a 	mov	sp,fp
   824e4:	df000017 	ldw	fp,0(sp)
   824e8:	dec00104 	addi	sp,sp,4
   824ec:	f800283a 	ret

000824f0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   824f0:	defff504 	addi	sp,sp,-44
   824f4:	dfc00a15 	stw	ra,40(sp)
   824f8:	df000915 	stw	fp,36(sp)
   824fc:	df000904 	addi	fp,sp,36
   82500:	e13ffc15 	stw	r4,-16(fp)
   82504:	e17ffd15 	stw	r5,-12(fp)
   82508:	e1bffe15 	stw	r6,-8(fp)
   8250c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82510:	00bffa84 	movi	r2,-22
   82514:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   82518:	e0bffd17 	ldw	r2,-12(fp)
   8251c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82520:	e0bff817 	ldw	r2,-32(fp)
   82524:	10800808 	cmpgei	r2,r2,32
   82528:	1000271e 	bne	r2,zero,825c8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8252c:	0005303a 	rdctl	r2,status
   82530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82534:	e0fffb17 	ldw	r3,-20(fp)
   82538:	00bfff84 	movi	r2,-2
   8253c:	1884703a 	and	r2,r3,r2
   82540:	1001703a 	wrctl	status,r2
  
  return context;
   82544:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82548:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8254c:	00800234 	movhi	r2,8
   82550:	10960404 	addi	r2,r2,22544
   82554:	e0fff817 	ldw	r3,-32(fp)
   82558:	180690fa 	slli	r3,r3,3
   8255c:	10c5883a 	add	r2,r2,r3
   82560:	e0fffe17 	ldw	r3,-8(fp)
   82564:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   82568:	00800234 	movhi	r2,8
   8256c:	10960404 	addi	r2,r2,22544
   82570:	e0fff817 	ldw	r3,-32(fp)
   82574:	180690fa 	slli	r3,r3,3
   82578:	10c5883a 	add	r2,r2,r3
   8257c:	10800104 	addi	r2,r2,4
   82580:	e0ffff17 	ldw	r3,-4(fp)
   82584:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82588:	e0bffe17 	ldw	r2,-8(fp)
   8258c:	10000526 	beq	r2,zero,825a4 <alt_iic_isr_register+0xb4>
   82590:	e0bff817 	ldw	r2,-32(fp)
   82594:	100b883a 	mov	r5,r2
   82598:	e13ffc17 	ldw	r4,-16(fp)
   8259c:	00823600 	call	82360 <alt_ic_irq_enable>
   825a0:	00000406 	br	825b4 <alt_iic_isr_register+0xc4>
   825a4:	e0bff817 	ldw	r2,-32(fp)
   825a8:	100b883a 	mov	r5,r2
   825ac:	e13ffc17 	ldw	r4,-16(fp)
   825b0:	00824000 	call	82400 <alt_ic_irq_disable>
   825b4:	e0bff715 	stw	r2,-36(fp)
   825b8:	e0bffa17 	ldw	r2,-24(fp)
   825bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   825c0:	e0bff917 	ldw	r2,-28(fp)
   825c4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   825c8:	e0bff717 	ldw	r2,-36(fp)
}
   825cc:	e037883a 	mov	sp,fp
   825d0:	dfc00117 	ldw	ra,4(sp)
   825d4:	df000017 	ldw	fp,0(sp)
   825d8:	dec00204 	addi	sp,sp,8
   825dc:	f800283a 	ret

000825e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   825e0:	defffe04 	addi	sp,sp,-8
   825e4:	df000115 	stw	fp,4(sp)
   825e8:	df000104 	addi	fp,sp,4
   825ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   825f0:	e0bfff17 	ldw	r2,-4(fp)
   825f4:	10bffe84 	addi	r2,r2,-6
   825f8:	10c00428 	cmpgeui	r3,r2,16
   825fc:	18001a1e 	bne	r3,zero,82668 <alt_exception_cause_generated_bad_addr+0x88>
   82600:	100690ba 	slli	r3,r2,2
   82604:	00800234 	movhi	r2,8
   82608:	10898604 	addi	r2,r2,9752
   8260c:	1885883a 	add	r2,r3,r2
   82610:	10800017 	ldw	r2,0(r2)
   82614:	1000683a 	jmp	r2
   82618:	00082658 	cmpnei	zero,zero,8345
   8261c:	00082658 	cmpnei	zero,zero,8345
   82620:	00082668 	cmpgeui	zero,zero,8345
   82624:	00082668 	cmpgeui	zero,zero,8345
   82628:	00082668 	cmpgeui	zero,zero,8345
   8262c:	00082658 	cmpnei	zero,zero,8345
   82630:	00082660 	cmpeqi	zero,zero,8345
   82634:	00082668 	cmpgeui	zero,zero,8345
   82638:	00082658 	cmpnei	zero,zero,8345
   8263c:	00082658 	cmpnei	zero,zero,8345
   82640:	00082668 	cmpgeui	zero,zero,8345
   82644:	00082658 	cmpnei	zero,zero,8345
   82648:	00082660 	cmpeqi	zero,zero,8345
   8264c:	00082668 	cmpgeui	zero,zero,8345
   82650:	00082668 	cmpgeui	zero,zero,8345
   82654:	00082658 	cmpnei	zero,zero,8345
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   82658:	00800044 	movi	r2,1
   8265c:	00000306 	br	8266c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   82660:	0005883a 	mov	r2,zero
   82664:	00000106 	br	8266c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   82668:	0005883a 	mov	r2,zero
  }
}
   8266c:	e037883a 	mov	sp,fp
   82670:	df000017 	ldw	fp,0(sp)
   82674:	dec00104 	addi	sp,sp,4
   82678:	f800283a 	ret

0008267c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8267c:	defff904 	addi	sp,sp,-28
   82680:	dfc00615 	stw	ra,24(sp)
   82684:	df000515 	stw	fp,20(sp)
   82688:	df000504 	addi	fp,sp,20
   8268c:	e13ffc15 	stw	r4,-16(fp)
   82690:	e17ffd15 	stw	r5,-12(fp)
   82694:	e1bffe15 	stw	r6,-8(fp)
   82698:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8269c:	e1bfff17 	ldw	r6,-4(fp)
   826a0:	e17ffe17 	ldw	r5,-8(fp)
   826a4:	e13ffd17 	ldw	r4,-12(fp)
   826a8:	00828d80 	call	828d8 <open>
   826ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   826b0:	e0bffb17 	ldw	r2,-20(fp)
   826b4:	10001c16 	blt	r2,zero,82728 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   826b8:	00800234 	movhi	r2,8
   826bc:	1090c104 	addi	r2,r2,17156
   826c0:	e0fffb17 	ldw	r3,-20(fp)
   826c4:	18c00324 	muli	r3,r3,12
   826c8:	10c5883a 	add	r2,r2,r3
   826cc:	10c00017 	ldw	r3,0(r2)
   826d0:	e0bffc17 	ldw	r2,-16(fp)
   826d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   826d8:	00800234 	movhi	r2,8
   826dc:	1090c104 	addi	r2,r2,17156
   826e0:	e0fffb17 	ldw	r3,-20(fp)
   826e4:	18c00324 	muli	r3,r3,12
   826e8:	10c5883a 	add	r2,r2,r3
   826ec:	10800104 	addi	r2,r2,4
   826f0:	10c00017 	ldw	r3,0(r2)
   826f4:	e0bffc17 	ldw	r2,-16(fp)
   826f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   826fc:	00800234 	movhi	r2,8
   82700:	1090c104 	addi	r2,r2,17156
   82704:	e0fffb17 	ldw	r3,-20(fp)
   82708:	18c00324 	muli	r3,r3,12
   8270c:	10c5883a 	add	r2,r2,r3
   82710:	10800204 	addi	r2,r2,8
   82714:	10c00017 	ldw	r3,0(r2)
   82718:	e0bffc17 	ldw	r2,-16(fp)
   8271c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82720:	e13ffb17 	ldw	r4,-20(fp)
   82724:	0082a300 	call	82a30 <alt_release_fd>
  }
} 
   82728:	0001883a 	nop
   8272c:	e037883a 	mov	sp,fp
   82730:	dfc00117 	ldw	ra,4(sp)
   82734:	df000017 	ldw	fp,0(sp)
   82738:	dec00204 	addi	sp,sp,8
   8273c:	f800283a 	ret

00082740 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82740:	defffb04 	addi	sp,sp,-20
   82744:	dfc00415 	stw	ra,16(sp)
   82748:	df000315 	stw	fp,12(sp)
   8274c:	df000304 	addi	fp,sp,12
   82750:	e13ffd15 	stw	r4,-12(fp)
   82754:	e17ffe15 	stw	r5,-8(fp)
   82758:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8275c:	01c07fc4 	movi	r7,511
   82760:	01800044 	movi	r6,1
   82764:	e17ffd17 	ldw	r5,-12(fp)
   82768:	01000234 	movhi	r4,8
   8276c:	2110c404 	addi	r4,r4,17168
   82770:	008267c0 	call	8267c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82774:	01c07fc4 	movi	r7,511
   82778:	000d883a 	mov	r6,zero
   8277c:	e17ffe17 	ldw	r5,-8(fp)
   82780:	01000234 	movhi	r4,8
   82784:	2110c104 	addi	r4,r4,17156
   82788:	008267c0 	call	8267c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8278c:	01c07fc4 	movi	r7,511
   82790:	01800044 	movi	r6,1
   82794:	e17fff17 	ldw	r5,-4(fp)
   82798:	01000234 	movhi	r4,8
   8279c:	2110c704 	addi	r4,r4,17180
   827a0:	008267c0 	call	8267c <alt_open_fd>
}  
   827a4:	0001883a 	nop
   827a8:	e037883a 	mov	sp,fp
   827ac:	dfc00117 	ldw	ra,4(sp)
   827b0:	df000017 	ldw	fp,0(sp)
   827b4:	dec00204 	addi	sp,sp,8
   827b8:	f800283a 	ret

000827bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   827bc:	defffe04 	addi	sp,sp,-8
   827c0:	dfc00115 	stw	ra,4(sp)
   827c4:	df000015 	stw	fp,0(sp)
   827c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   827cc:	00800234 	movhi	r2,8
   827d0:	10912904 	addi	r2,r2,17572
   827d4:	10800017 	ldw	r2,0(r2)
   827d8:	10000526 	beq	r2,zero,827f0 <alt_get_errno+0x34>
   827dc:	00800234 	movhi	r2,8
   827e0:	10912904 	addi	r2,r2,17572
   827e4:	10800017 	ldw	r2,0(r2)
   827e8:	103ee83a 	callr	r2
   827ec:	00000206 	br	827f8 <alt_get_errno+0x3c>
   827f0:	00800234 	movhi	r2,8
   827f4:	1095fc04 	addi	r2,r2,22512
}
   827f8:	e037883a 	mov	sp,fp
   827fc:	dfc00117 	ldw	ra,4(sp)
   82800:	df000017 	ldw	fp,0(sp)
   82804:	dec00204 	addi	sp,sp,8
   82808:	f800283a 	ret

0008280c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8280c:	defffd04 	addi	sp,sp,-12
   82810:	df000215 	stw	fp,8(sp)
   82814:	df000204 	addi	fp,sp,8
   82818:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8281c:	e0bfff17 	ldw	r2,-4(fp)
   82820:	10800217 	ldw	r2,8(r2)
   82824:	10d00034 	orhi	r3,r2,16384
   82828:	e0bfff17 	ldw	r2,-4(fp)
   8282c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82830:	e03ffe15 	stw	zero,-8(fp)
   82834:	00001d06 	br	828ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82838:	00800234 	movhi	r2,8
   8283c:	1090c104 	addi	r2,r2,17156
   82840:	e0fffe17 	ldw	r3,-8(fp)
   82844:	18c00324 	muli	r3,r3,12
   82848:	10c5883a 	add	r2,r2,r3
   8284c:	10c00017 	ldw	r3,0(r2)
   82850:	e0bfff17 	ldw	r2,-4(fp)
   82854:	10800017 	ldw	r2,0(r2)
   82858:	1880111e 	bne	r3,r2,828a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8285c:	00800234 	movhi	r2,8
   82860:	1090c104 	addi	r2,r2,17156
   82864:	e0fffe17 	ldw	r3,-8(fp)
   82868:	18c00324 	muli	r3,r3,12
   8286c:	10c5883a 	add	r2,r2,r3
   82870:	10800204 	addi	r2,r2,8
   82874:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82878:	1000090e 	bge	r2,zero,828a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8287c:	e0bffe17 	ldw	r2,-8(fp)
   82880:	10c00324 	muli	r3,r2,12
   82884:	00800234 	movhi	r2,8
   82888:	1090c104 	addi	r2,r2,17156
   8288c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82890:	e0bfff17 	ldw	r2,-4(fp)
   82894:	18800226 	beq	r3,r2,828a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82898:	00bffcc4 	movi	r2,-13
   8289c:	00000a06 	br	828c8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   828a0:	e0bffe17 	ldw	r2,-8(fp)
   828a4:	10800044 	addi	r2,r2,1
   828a8:	e0bffe15 	stw	r2,-8(fp)
   828ac:	00800234 	movhi	r2,8
   828b0:	10912804 	addi	r2,r2,17568
   828b4:	10800017 	ldw	r2,0(r2)
   828b8:	1007883a 	mov	r3,r2
   828bc:	e0bffe17 	ldw	r2,-8(fp)
   828c0:	18bfdd2e 	bgeu	r3,r2,82838 <__alt_data_end+0xfffb4638>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   828c4:	0005883a 	mov	r2,zero
}
   828c8:	e037883a 	mov	sp,fp
   828cc:	df000017 	ldw	fp,0(sp)
   828d0:	dec00104 	addi	sp,sp,4
   828d4:	f800283a 	ret

000828d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   828d8:	defff604 	addi	sp,sp,-40
   828dc:	dfc00915 	stw	ra,36(sp)
   828e0:	df000815 	stw	fp,32(sp)
   828e4:	df000804 	addi	fp,sp,32
   828e8:	e13ffd15 	stw	r4,-12(fp)
   828ec:	e17ffe15 	stw	r5,-8(fp)
   828f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   828f4:	00bfffc4 	movi	r2,-1
   828f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   828fc:	00bffb44 	movi	r2,-19
   82900:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   82904:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82908:	01400234 	movhi	r5,8
   8290c:	29512604 	addi	r5,r5,17560
   82910:	e13ffd17 	ldw	r4,-12(fp)
   82914:	008224c0 	call	8224c <alt_find_dev>
   82918:	e0bff815 	stw	r2,-32(fp)
   8291c:	e0bff817 	ldw	r2,-32(fp)
   82920:	1000051e 	bne	r2,zero,82938 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82924:	e13ffd17 	ldw	r4,-12(fp)
   82928:	0082c5c0 	call	82c5c <alt_find_file>
   8292c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   82930:	00800044 	movi	r2,1
   82934:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82938:	e0bff817 	ldw	r2,-32(fp)
   8293c:	10002926 	beq	r2,zero,829e4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82940:	e13ff817 	ldw	r4,-32(fp)
   82944:	0082d700 	call	82d70 <alt_get_fd>
   82948:	e0bff915 	stw	r2,-28(fp)
   8294c:	e0bff917 	ldw	r2,-28(fp)
   82950:	1000030e 	bge	r2,zero,82960 <open+0x88>
    {
      status = index;
   82954:	e0bff917 	ldw	r2,-28(fp)
   82958:	e0bffa15 	stw	r2,-24(fp)
   8295c:	00002306 	br	829ec <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   82960:	e0bff917 	ldw	r2,-28(fp)
   82964:	10c00324 	muli	r3,r2,12
   82968:	00800234 	movhi	r2,8
   8296c:	1090c104 	addi	r2,r2,17156
   82970:	1885883a 	add	r2,r3,r2
   82974:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82978:	e0fffe17 	ldw	r3,-8(fp)
   8297c:	00900034 	movhi	r2,16384
   82980:	10bfffc4 	addi	r2,r2,-1
   82984:	1886703a 	and	r3,r3,r2
   82988:	e0bffc17 	ldw	r2,-16(fp)
   8298c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82990:	e0bffb17 	ldw	r2,-20(fp)
   82994:	1000051e 	bne	r2,zero,829ac <open+0xd4>
   82998:	e13ffc17 	ldw	r4,-16(fp)
   8299c:	008280c0 	call	8280c <alt_file_locked>
   829a0:	e0bffa15 	stw	r2,-24(fp)
   829a4:	e0bffa17 	ldw	r2,-24(fp)
   829a8:	10001016 	blt	r2,zero,829ec <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   829ac:	e0bff817 	ldw	r2,-32(fp)
   829b0:	10800317 	ldw	r2,12(r2)
   829b4:	10000826 	beq	r2,zero,829d8 <open+0x100>
   829b8:	e0bff817 	ldw	r2,-32(fp)
   829bc:	10800317 	ldw	r2,12(r2)
   829c0:	e1ffff17 	ldw	r7,-4(fp)
   829c4:	e1bffe17 	ldw	r6,-8(fp)
   829c8:	e17ffd17 	ldw	r5,-12(fp)
   829cc:	e13ffc17 	ldw	r4,-16(fp)
   829d0:	103ee83a 	callr	r2
   829d4:	00000106 	br	829dc <open+0x104>
   829d8:	0005883a 	mov	r2,zero
   829dc:	e0bffa15 	stw	r2,-24(fp)
   829e0:	00000206 	br	829ec <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   829e4:	00bffb44 	movi	r2,-19
   829e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   829ec:	e0bffa17 	ldw	r2,-24(fp)
   829f0:	1000090e 	bge	r2,zero,82a18 <open+0x140>
  {
    alt_release_fd (index);  
   829f4:	e13ff917 	ldw	r4,-28(fp)
   829f8:	0082a300 	call	82a30 <alt_release_fd>
    ALT_ERRNO = -status;
   829fc:	00827bc0 	call	827bc <alt_get_errno>
   82a00:	1007883a 	mov	r3,r2
   82a04:	e0bffa17 	ldw	r2,-24(fp)
   82a08:	0085c83a 	sub	r2,zero,r2
   82a0c:	18800015 	stw	r2,0(r3)
    return -1;
   82a10:	00bfffc4 	movi	r2,-1
   82a14:	00000106 	br	82a1c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   82a18:	e0bff917 	ldw	r2,-28(fp)
}
   82a1c:	e037883a 	mov	sp,fp
   82a20:	dfc00117 	ldw	ra,4(sp)
   82a24:	df000017 	ldw	fp,0(sp)
   82a28:	dec00204 	addi	sp,sp,8
   82a2c:	f800283a 	ret

00082a30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82a30:	defffe04 	addi	sp,sp,-8
   82a34:	df000115 	stw	fp,4(sp)
   82a38:	df000104 	addi	fp,sp,4
   82a3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82a40:	e0bfff17 	ldw	r2,-4(fp)
   82a44:	108000d0 	cmplti	r2,r2,3
   82a48:	10000d1e 	bne	r2,zero,82a80 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82a4c:	00800234 	movhi	r2,8
   82a50:	1090c104 	addi	r2,r2,17156
   82a54:	e0ffff17 	ldw	r3,-4(fp)
   82a58:	18c00324 	muli	r3,r3,12
   82a5c:	10c5883a 	add	r2,r2,r3
   82a60:	10800204 	addi	r2,r2,8
   82a64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82a68:	00800234 	movhi	r2,8
   82a6c:	1090c104 	addi	r2,r2,17156
   82a70:	e0ffff17 	ldw	r3,-4(fp)
   82a74:	18c00324 	muli	r3,r3,12
   82a78:	10c5883a 	add	r2,r2,r3
   82a7c:	10000015 	stw	zero,0(r2)
  }
}
   82a80:	0001883a 	nop
   82a84:	e037883a 	mov	sp,fp
   82a88:	df000017 	ldw	fp,0(sp)
   82a8c:	dec00104 	addi	sp,sp,4
   82a90:	f800283a 	ret

00082a94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82a94:	defffa04 	addi	sp,sp,-24
   82a98:	df000515 	stw	fp,20(sp)
   82a9c:	df000504 	addi	fp,sp,20
   82aa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82aa4:	0005303a 	rdctl	r2,status
   82aa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82aac:	e0fffc17 	ldw	r3,-16(fp)
   82ab0:	00bfff84 	movi	r2,-2
   82ab4:	1884703a 	and	r2,r3,r2
   82ab8:	1001703a 	wrctl	status,r2
  
  return context;
   82abc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82ac0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82ac4:	e0bfff17 	ldw	r2,-4(fp)
   82ac8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   82acc:	e0bffd17 	ldw	r2,-12(fp)
   82ad0:	10800017 	ldw	r2,0(r2)
   82ad4:	e0fffd17 	ldw	r3,-12(fp)
   82ad8:	18c00117 	ldw	r3,4(r3)
   82adc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   82ae0:	e0bffd17 	ldw	r2,-12(fp)
   82ae4:	10800117 	ldw	r2,4(r2)
   82ae8:	e0fffd17 	ldw	r3,-12(fp)
   82aec:	18c00017 	ldw	r3,0(r3)
   82af0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82af4:	e0bffd17 	ldw	r2,-12(fp)
   82af8:	e0fffd17 	ldw	r3,-12(fp)
   82afc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   82b00:	e0bffd17 	ldw	r2,-12(fp)
   82b04:	e0fffd17 	ldw	r3,-12(fp)
   82b08:	10c00015 	stw	r3,0(r2)
   82b0c:	e0bffb17 	ldw	r2,-20(fp)
   82b10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82b14:	e0bffe17 	ldw	r2,-8(fp)
   82b18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   82b1c:	0001883a 	nop
   82b20:	e037883a 	mov	sp,fp
   82b24:	df000017 	ldw	fp,0(sp)
   82b28:	dec00104 	addi	sp,sp,4
   82b2c:	f800283a 	ret

00082b30 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   82b30:	defffb04 	addi	sp,sp,-20
   82b34:	dfc00415 	stw	ra,16(sp)
   82b38:	df000315 	stw	fp,12(sp)
   82b3c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   82b40:	d0a00917 	ldw	r2,-32732(gp)
   82b44:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82b48:	d0a4e217 	ldw	r2,-27768(gp)
   82b4c:	10800044 	addi	r2,r2,1
   82b50:	d0a4e215 	stw	r2,-27768(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82b54:	00002e06 	br	82c10 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   82b58:	e0bffd17 	ldw	r2,-12(fp)
   82b5c:	10800017 	ldw	r2,0(r2)
   82b60:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   82b64:	e0bffd17 	ldw	r2,-12(fp)
   82b68:	10800403 	ldbu	r2,16(r2)
   82b6c:	10803fcc 	andi	r2,r2,255
   82b70:	10000426 	beq	r2,zero,82b84 <alt_tick+0x54>
   82b74:	d0a4e217 	ldw	r2,-27768(gp)
   82b78:	1000021e 	bne	r2,zero,82b84 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   82b7c:	e0bffd17 	ldw	r2,-12(fp)
   82b80:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   82b84:	e0bffd17 	ldw	r2,-12(fp)
   82b88:	10800217 	ldw	r2,8(r2)
   82b8c:	d0e4e217 	ldw	r3,-27768(gp)
   82b90:	18801d36 	bltu	r3,r2,82c08 <alt_tick+0xd8>
   82b94:	e0bffd17 	ldw	r2,-12(fp)
   82b98:	10800403 	ldbu	r2,16(r2)
   82b9c:	10803fcc 	andi	r2,r2,255
   82ba0:	1000191e 	bne	r2,zero,82c08 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   82ba4:	e0bffd17 	ldw	r2,-12(fp)
   82ba8:	10800317 	ldw	r2,12(r2)
   82bac:	e0fffd17 	ldw	r3,-12(fp)
   82bb0:	18c00517 	ldw	r3,20(r3)
   82bb4:	1809883a 	mov	r4,r3
   82bb8:	103ee83a 	callr	r2
   82bbc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   82bc0:	e0bfff17 	ldw	r2,-4(fp)
   82bc4:	1000031e 	bne	r2,zero,82bd4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   82bc8:	e13ffd17 	ldw	r4,-12(fp)
   82bcc:	0082a940 	call	82a94 <alt_alarm_stop>
   82bd0:	00000d06 	br	82c08 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   82bd4:	e0bffd17 	ldw	r2,-12(fp)
   82bd8:	10c00217 	ldw	r3,8(r2)
   82bdc:	e0bfff17 	ldw	r2,-4(fp)
   82be0:	1887883a 	add	r3,r3,r2
   82be4:	e0bffd17 	ldw	r2,-12(fp)
   82be8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   82bec:	e0bffd17 	ldw	r2,-12(fp)
   82bf0:	10c00217 	ldw	r3,8(r2)
   82bf4:	d0a4e217 	ldw	r2,-27768(gp)
   82bf8:	1880032e 	bgeu	r3,r2,82c08 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   82bfc:	e0bffd17 	ldw	r2,-12(fp)
   82c00:	00c00044 	movi	r3,1
   82c04:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   82c08:	e0bffe17 	ldw	r2,-8(fp)
   82c0c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   82c10:	e0fffd17 	ldw	r3,-12(fp)
   82c14:	d0a00904 	addi	r2,gp,-32732
   82c18:	18bfcf1e 	bne	r3,r2,82b58 <__alt_data_end+0xfffb4958>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   82c1c:	0001883a 	nop
}
   82c20:	0001883a 	nop
   82c24:	e037883a 	mov	sp,fp
   82c28:	dfc00117 	ldw	ra,4(sp)
   82c2c:	df000017 	ldw	fp,0(sp)
   82c30:	dec00204 	addi	sp,sp,8
   82c34:	f800283a 	ret

00082c38 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   82c38:	deffff04 	addi	sp,sp,-4
   82c3c:	df000015 	stw	fp,0(sp)
   82c40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   82c44:	000170fa 	wrctl	ienable,zero
}
   82c48:	0001883a 	nop
   82c4c:	e037883a 	mov	sp,fp
   82c50:	df000017 	ldw	fp,0(sp)
   82c54:	dec00104 	addi	sp,sp,4
   82c58:	f800283a 	ret

00082c5c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   82c5c:	defffb04 	addi	sp,sp,-20
   82c60:	dfc00415 	stw	ra,16(sp)
   82c64:	df000315 	stw	fp,12(sp)
   82c68:	df000304 	addi	fp,sp,12
   82c6c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   82c70:	00800234 	movhi	r2,8
   82c74:	10912404 	addi	r2,r2,17552
   82c78:	10800017 	ldw	r2,0(r2)
   82c7c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   82c80:	00003106 	br	82d48 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   82c84:	e0bffd17 	ldw	r2,-12(fp)
   82c88:	10800217 	ldw	r2,8(r2)
   82c8c:	1009883a 	mov	r4,r2
   82c90:	00806c00 	call	806c0 <strlen>
   82c94:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   82c98:	e0bffd17 	ldw	r2,-12(fp)
   82c9c:	10c00217 	ldw	r3,8(r2)
   82ca0:	e0bffe17 	ldw	r2,-8(fp)
   82ca4:	10bfffc4 	addi	r2,r2,-1
   82ca8:	1885883a 	add	r2,r3,r2
   82cac:	10800003 	ldbu	r2,0(r2)
   82cb0:	10803fcc 	andi	r2,r2,255
   82cb4:	1080201c 	xori	r2,r2,128
   82cb8:	10bfe004 	addi	r2,r2,-128
   82cbc:	10800bd8 	cmpnei	r2,r2,47
   82cc0:	1000031e 	bne	r2,zero,82cd0 <alt_find_file+0x74>
    {
      len -= 1;
   82cc4:	e0bffe17 	ldw	r2,-8(fp)
   82cc8:	10bfffc4 	addi	r2,r2,-1
   82ccc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82cd0:	e0bffe17 	ldw	r2,-8(fp)
   82cd4:	e0ffff17 	ldw	r3,-4(fp)
   82cd8:	1885883a 	add	r2,r3,r2
   82cdc:	10800003 	ldbu	r2,0(r2)
   82ce0:	10803fcc 	andi	r2,r2,255
   82ce4:	1080201c 	xori	r2,r2,128
   82ce8:	10bfe004 	addi	r2,r2,-128
   82cec:	10800be0 	cmpeqi	r2,r2,47
   82cf0:	1000081e 	bne	r2,zero,82d14 <alt_find_file+0xb8>
   82cf4:	e0bffe17 	ldw	r2,-8(fp)
   82cf8:	e0ffff17 	ldw	r3,-4(fp)
   82cfc:	1885883a 	add	r2,r3,r2
   82d00:	10800003 	ldbu	r2,0(r2)
   82d04:	10803fcc 	andi	r2,r2,255
   82d08:	1080201c 	xori	r2,r2,128
   82d0c:	10bfe004 	addi	r2,r2,-128
   82d10:	10000a1e 	bne	r2,zero,82d3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   82d14:	e0bffd17 	ldw	r2,-12(fp)
   82d18:	10800217 	ldw	r2,8(r2)
   82d1c:	e0fffe17 	ldw	r3,-8(fp)
   82d20:	180d883a 	mov	r6,r3
   82d24:	e17fff17 	ldw	r5,-4(fp)
   82d28:	1009883a 	mov	r4,r2
   82d2c:	0082ed40 	call	82ed4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   82d30:	1000021e 	bne	r2,zero,82d3c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   82d34:	e0bffd17 	ldw	r2,-12(fp)
   82d38:	00000806 	br	82d5c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   82d3c:	e0bffd17 	ldw	r2,-12(fp)
   82d40:	10800017 	ldw	r2,0(r2)
   82d44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   82d48:	e0fffd17 	ldw	r3,-12(fp)
   82d4c:	00800234 	movhi	r2,8
   82d50:	10912404 	addi	r2,r2,17552
   82d54:	18bfcb1e 	bne	r3,r2,82c84 <__alt_data_end+0xfffb4a84>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   82d58:	0005883a 	mov	r2,zero
}
   82d5c:	e037883a 	mov	sp,fp
   82d60:	dfc00117 	ldw	ra,4(sp)
   82d64:	df000017 	ldw	fp,0(sp)
   82d68:	dec00204 	addi	sp,sp,8
   82d6c:	f800283a 	ret

00082d70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   82d70:	defffc04 	addi	sp,sp,-16
   82d74:	df000315 	stw	fp,12(sp)
   82d78:	df000304 	addi	fp,sp,12
   82d7c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   82d80:	00bffa04 	movi	r2,-24
   82d84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82d88:	e03ffd15 	stw	zero,-12(fp)
   82d8c:	00001d06 	br	82e04 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   82d90:	00800234 	movhi	r2,8
   82d94:	1090c104 	addi	r2,r2,17156
   82d98:	e0fffd17 	ldw	r3,-12(fp)
   82d9c:	18c00324 	muli	r3,r3,12
   82da0:	10c5883a 	add	r2,r2,r3
   82da4:	10800017 	ldw	r2,0(r2)
   82da8:	1000131e 	bne	r2,zero,82df8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   82dac:	00800234 	movhi	r2,8
   82db0:	1090c104 	addi	r2,r2,17156
   82db4:	e0fffd17 	ldw	r3,-12(fp)
   82db8:	18c00324 	muli	r3,r3,12
   82dbc:	10c5883a 	add	r2,r2,r3
   82dc0:	e0ffff17 	ldw	r3,-4(fp)
   82dc4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   82dc8:	00800234 	movhi	r2,8
   82dcc:	10912804 	addi	r2,r2,17568
   82dd0:	10c00017 	ldw	r3,0(r2)
   82dd4:	e0bffd17 	ldw	r2,-12(fp)
   82dd8:	1880040e 	bge	r3,r2,82dec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   82ddc:	00800234 	movhi	r2,8
   82de0:	10912804 	addi	r2,r2,17568
   82de4:	e0fffd17 	ldw	r3,-12(fp)
   82de8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   82dec:	e0bffd17 	ldw	r2,-12(fp)
   82df0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   82df4:	00000606 	br	82e10 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   82df8:	e0bffd17 	ldw	r2,-12(fp)
   82dfc:	10800044 	addi	r2,r2,1
   82e00:	e0bffd15 	stw	r2,-12(fp)
   82e04:	e0bffd17 	ldw	r2,-12(fp)
   82e08:	10800810 	cmplti	r2,r2,32
   82e0c:	103fe01e 	bne	r2,zero,82d90 <__alt_data_end+0xfffb4b90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   82e10:	e0bffe17 	ldw	r2,-8(fp)
}
   82e14:	e037883a 	mov	sp,fp
   82e18:	df000017 	ldw	fp,0(sp)
   82e1c:	dec00104 	addi	sp,sp,4
   82e20:	f800283a 	ret

00082e24 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   82e24:	defffb04 	addi	sp,sp,-20
   82e28:	df000415 	stw	fp,16(sp)
   82e2c:	df000404 	addi	fp,sp,16
   82e30:	e13ffe15 	stw	r4,-8(fp)
   82e34:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   82e38:	e0bfff17 	ldw	r2,-4(fp)
   82e3c:	10840070 	cmpltui	r2,r2,4097
   82e40:	1000021e 	bne	r2,zero,82e4c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   82e44:	00840004 	movi	r2,4096
   82e48:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   82e4c:	e0fffe17 	ldw	r3,-8(fp)
   82e50:	e0bfff17 	ldw	r2,-4(fp)
   82e54:	1885883a 	add	r2,r3,r2
   82e58:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   82e5c:	e0bffe17 	ldw	r2,-8(fp)
   82e60:	e0bffc15 	stw	r2,-16(fp)
   82e64:	00000506 	br	82e7c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   82e68:	e0bffc17 	ldw	r2,-16(fp)
   82e6c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   82e70:	e0bffc17 	ldw	r2,-16(fp)
   82e74:	10800804 	addi	r2,r2,32
   82e78:	e0bffc15 	stw	r2,-16(fp)
   82e7c:	e0fffc17 	ldw	r3,-16(fp)
   82e80:	e0bffd17 	ldw	r2,-12(fp)
   82e84:	18bff836 	bltu	r3,r2,82e68 <__alt_data_end+0xfffb4c68>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   82e88:	e0bffe17 	ldw	r2,-8(fp)
   82e8c:	108007cc 	andi	r2,r2,31
   82e90:	10000226 	beq	r2,zero,82e9c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   82e94:	e0bffc17 	ldw	r2,-16(fp)
   82e98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   82e9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   82ea0:	0001883a 	nop
   82ea4:	e037883a 	mov	sp,fp
   82ea8:	df000017 	ldw	fp,0(sp)
   82eac:	dec00104 	addi	sp,sp,4
   82eb0:	f800283a 	ret

00082eb4 <exit>:
   82eb4:	defffe04 	addi	sp,sp,-8
   82eb8:	000b883a 	mov	r5,zero
   82ebc:	dc000015 	stw	r16,0(sp)
   82ec0:	dfc00115 	stw	ra,4(sp)
   82ec4:	2021883a 	mov	r16,r4
   82ec8:	0082f2c0 	call	82f2c <__call_exitprocs>
   82ecc:	8009883a 	mov	r4,r16
   82ed0:	00830bc0 	call	830bc <_exit>

00082ed4 <memcmp>:
   82ed4:	218d883a 	add	r6,r4,r6
   82ed8:	21800826 	beq	r4,r6,82efc <memcmp+0x28>
   82edc:	20800003 	ldbu	r2,0(r4)
   82ee0:	28c00003 	ldbu	r3,0(r5)
   82ee4:	10c00226 	beq	r2,r3,82ef0 <memcmp+0x1c>
   82ee8:	10c5c83a 	sub	r2,r2,r3
   82eec:	f800283a 	ret
   82ef0:	21000044 	addi	r4,r4,1
   82ef4:	29400044 	addi	r5,r5,1
   82ef8:	003ff706 	br	82ed8 <__alt_data_end+0xfffb4cd8>
   82efc:	0005883a 	mov	r2,zero
   82f00:	f800283a 	ret

00082f04 <memcpy>:
   82f04:	2005883a 	mov	r2,r4
   82f08:	2007883a 	mov	r3,r4
   82f0c:	218d883a 	add	r6,r4,r6
   82f10:	19800526 	beq	r3,r6,82f28 <memcpy+0x24>
   82f14:	29000003 	ldbu	r4,0(r5)
   82f18:	18c00044 	addi	r3,r3,1
   82f1c:	29400044 	addi	r5,r5,1
   82f20:	193fffc5 	stb	r4,-1(r3)
   82f24:	003ffa06 	br	82f10 <__alt_data_end+0xfffb4d10>
   82f28:	f800283a 	ret

00082f2c <__call_exitprocs>:
   82f2c:	defff504 	addi	sp,sp,-44
   82f30:	dd000515 	stw	r20,20(sp)
   82f34:	05000234 	movhi	r20,8
   82f38:	dc800315 	stw	r18,12(sp)
   82f3c:	dfc00a15 	stw	ra,40(sp)
   82f40:	df000915 	stw	fp,36(sp)
   82f44:	ddc00815 	stw	r23,32(sp)
   82f48:	dd800715 	stw	r22,28(sp)
   82f4c:	dd400615 	stw	r21,24(sp)
   82f50:	dcc00415 	stw	r19,16(sp)
   82f54:	dc400215 	stw	r17,8(sp)
   82f58:	dc000115 	stw	r16,4(sp)
   82f5c:	d9000015 	stw	r4,0(sp)
   82f60:	2825883a 	mov	r18,r5
   82f64:	a5112104 	addi	r20,r20,17540
   82f68:	a4400017 	ldw	r17,0(r20)
   82f6c:	8cc00c17 	ldw	r19,48(r17)
   82f70:	8c400c04 	addi	r17,r17,48
   82f74:	98004526 	beq	r19,zero,8308c <__call_exitprocs+0x160>
   82f78:	9c000117 	ldw	r16,4(r19)
   82f7c:	00900034 	movhi	r2,16384
   82f80:	10bfffc4 	addi	r2,r2,-1
   82f84:	9d402217 	ldw	r21,136(r19)
   82f88:	85bfffc4 	addi	r22,r16,-1
   82f8c:	80a1883a 	add	r16,r16,r2
   82f90:	8421883a 	add	r16,r16,r16
   82f94:	8421883a 	add	r16,r16,r16
   82f98:	ac2f883a 	add	r23,r21,r16
   82f9c:	84000204 	addi	r16,r16,8
   82fa0:	9c21883a 	add	r16,r19,r16
   82fa4:	b0002716 	blt	r22,zero,83044 <__call_exitprocs+0x118>
   82fa8:	90000726 	beq	r18,zero,82fc8 <__call_exitprocs+0x9c>
   82fac:	a800041e 	bne	r21,zero,82fc0 <__call_exitprocs+0x94>
   82fb0:	b5bfffc4 	addi	r22,r22,-1
   82fb4:	bdffff04 	addi	r23,r23,-4
   82fb8:	843fff04 	addi	r16,r16,-4
   82fbc:	003ff906 	br	82fa4 <__alt_data_end+0xfffb4da4>
   82fc0:	b9002017 	ldw	r4,128(r23)
   82fc4:	913ffa1e 	bne	r18,r4,82fb0 <__alt_data_end+0xfffb4db0>
   82fc8:	99000117 	ldw	r4,4(r19)
   82fcc:	82000017 	ldw	r8,0(r16)
   82fd0:	213fffc4 	addi	r4,r4,-1
   82fd4:	b100021e 	bne	r22,r4,82fe0 <__call_exitprocs+0xb4>
   82fd8:	9d800115 	stw	r22,4(r19)
   82fdc:	00000106 	br	82fe4 <__call_exitprocs+0xb8>
   82fe0:	80000015 	stw	zero,0(r16)
   82fe4:	403ff226 	beq	r8,zero,82fb0 <__alt_data_end+0xfffb4db0>
   82fe8:	9f000117 	ldw	fp,4(r19)
   82fec:	a8000526 	beq	r21,zero,83004 <__call_exitprocs+0xd8>
   82ff0:	00800044 	movi	r2,1
   82ff4:	1592983a 	sll	r9,r2,r22
   82ff8:	a9404017 	ldw	r5,256(r21)
   82ffc:	494a703a 	and	r5,r9,r5
   83000:	2800021e 	bne	r5,zero,8300c <__call_exitprocs+0xe0>
   83004:	403ee83a 	callr	r8
   83008:	00000906 	br	83030 <__call_exitprocs+0x104>
   8300c:	a9004117 	ldw	r4,260(r21)
   83010:	4908703a 	and	r4,r9,r4
   83014:	2000041e 	bne	r4,zero,83028 <__call_exitprocs+0xfc>
   83018:	b9400017 	ldw	r5,0(r23)
   8301c:	d9000017 	ldw	r4,0(sp)
   83020:	403ee83a 	callr	r8
   83024:	00000206 	br	83030 <__call_exitprocs+0x104>
   83028:	b9000017 	ldw	r4,0(r23)
   8302c:	403ee83a 	callr	r8
   83030:	99000117 	ldw	r4,4(r19)
   83034:	e13fcc1e 	bne	fp,r4,82f68 <__alt_data_end+0xfffb4d68>
   83038:	89000017 	ldw	r4,0(r17)
   8303c:	993fdc26 	beq	r19,r4,82fb0 <__alt_data_end+0xfffb4db0>
   83040:	003fc906 	br	82f68 <__alt_data_end+0xfffb4d68>
   83044:	00800034 	movhi	r2,0
   83048:	10800004 	addi	r2,r2,0
   8304c:	10000f26 	beq	r2,zero,8308c <__call_exitprocs+0x160>
   83050:	99400117 	ldw	r5,4(r19)
   83054:	99000017 	ldw	r4,0(r19)
   83058:	2800091e 	bne	r5,zero,83080 <__call_exitprocs+0x154>
   8305c:	20000826 	beq	r4,zero,83080 <__call_exitprocs+0x154>
   83060:	89000015 	stw	r4,0(r17)
   83064:	a8000226 	beq	r21,zero,83070 <__call_exitprocs+0x144>
   83068:	a809883a 	mov	r4,r21
   8306c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   83070:	9809883a 	mov	r4,r19
   83074:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   83078:	8cc00017 	ldw	r19,0(r17)
   8307c:	003fbd06 	br	82f74 <__alt_data_end+0xfffb4d74>
   83080:	9823883a 	mov	r17,r19
   83084:	2027883a 	mov	r19,r4
   83088:	003fba06 	br	82f74 <__alt_data_end+0xfffb4d74>
   8308c:	dfc00a17 	ldw	ra,40(sp)
   83090:	df000917 	ldw	fp,36(sp)
   83094:	ddc00817 	ldw	r23,32(sp)
   83098:	dd800717 	ldw	r22,28(sp)
   8309c:	dd400617 	ldw	r21,24(sp)
   830a0:	dd000517 	ldw	r20,20(sp)
   830a4:	dcc00417 	ldw	r19,16(sp)
   830a8:	dc800317 	ldw	r18,12(sp)
   830ac:	dc400217 	ldw	r17,8(sp)
   830b0:	dc000117 	ldw	r16,4(sp)
   830b4:	dec00b04 	addi	sp,sp,44
   830b8:	f800283a 	ret

000830bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   830bc:	defffd04 	addi	sp,sp,-12
   830c0:	df000215 	stw	fp,8(sp)
   830c4:	df000204 	addi	fp,sp,8
   830c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   830cc:	0001883a 	nop
   830d0:	e0bfff17 	ldw	r2,-4(fp)
   830d4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   830d8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   830dc:	10000226 	beq	r2,zero,830e8 <_exit+0x2c>
    ALT_SIM_FAIL();
   830e0:	002af070 	cmpltui	zero,zero,43969
   830e4:	00000106 	br	830ec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   830e8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   830ec:	003fff06 	br	830ec <__alt_data_end+0xfffb4eec>
